"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6312],{8362:(e,d,n)=>{n.r(d),n.d(d,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var t=n(4848),s=n(8453);const i={id:"model_reading_encoded",title:"Reading Encoded Data"},o="Reading Encoded Data",r={id:"Model/Advanced Topics/model_reading_encoded",title:"Reading Encoded Data",description:"MVOM allows for the reading of data from a DIR-type file as a base-64 encoded string. The static readFileContentsById method of the Model class can be used for this functionality.",source:"@site/docs/04 - Model/07 - Advanced Topics/04 - Reading Encoded Data.md",sourceDirName:"04 - Model/07 - Advanced Topics",slug:"/Model/Advanced Topics/model_reading_encoded",permalink:"/mvom/docs/Model/Advanced Topics/model_reading_encoded",draft:!1,unlisted:!1,editUrl:"https://github.com/STORIS/mvom/tree/main/website/docs/04 - Model/07 - Advanced Topics/04 - Reading Encoded Data.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"model_reading_encoded",title:"Reading Encoded Data"},sidebar:"docsSidebar",previous:{title:"Schemaless Models",permalink:"/mvom/docs/Model/Advanced Topics/model_schemaless"},next:{title:"Detecting MVOM in Triggers",permalink:"/mvom/docs/Model/Advanced Topics/model_detecting_mvom"}},c={},l=[{value:"readFileContentsById",id:"readfilecontentsbyid",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Options Object Properties",id:"options-object-properties",level:4},{value:"Example",id:"example",level:3},{value:"How It Works",id:"how-it-works",level:3}];function a(e){const d={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(d.header,{children:(0,t.jsx)(d.h1,{id:"reading-encoded-data",children:"Reading Encoded Data"})}),"\n",(0,t.jsxs)(d.p,{children:["MVOM allows for the reading of data from a DIR-type file as a base-64 encoded string. The static ",(0,t.jsx)(d.code,{children:"readFileContentsById"})," method of the ",(0,t.jsx)(d.code,{children:"Model"})," class can be used for this functionality."]}),"\n",(0,t.jsx)(d.admonition,{type:"info",children:(0,t.jsxs)(d.p,{children:["The file name used to create the ",(0,t.jsx)(d.code,{children:"Model"})," class must have a record in the VOC file pointing to the location on disk where the directory resides."]})}),"\n",(0,t.jsx)(d.h2,{id:"readfilecontentsbyid",children:"readFileContentsById"}),"\n",(0,t.jsxs)(d.p,{children:["The ",(0,t.jsx)(d.code,{children:"readFileContentsById"})," method allows for reading a file from a directory and returning a Base-64 Encoded representation of the file's contents."]}),"\n",(0,t.jsx)(d.h3,{id:"syntax",children:"Syntax"}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-ts",children:"static readFileContentsById(id: string, options?: ModelReadFileContentsByIdOptions): Promise<string>\n"})}),"\n",(0,t.jsx)(d.h3,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(d.table,{children:[(0,t.jsx)(d.thead,{children:(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.th,{children:"Parameter"}),(0,t.jsx)(d.th,{children:"Type"}),(0,t.jsx)(d.th,{children:"Description"})]})}),(0,t.jsxs)(d.tbody,{children:[(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"id"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"string"})}),(0,t.jsx)(d.td,{children:"The record ID of the record to read"})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"options"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"object"})}),(0,t.jsxs)(d.td,{children:[(0,t.jsx)(d.a,{href:"#options-object-properties",children:"Options object"})," (see below)"]})]})]})]}),"\n",(0,t.jsx)(d.h4,{id:"options-object-properties",children:"Options Object Properties"}),"\n",(0,t.jsxs)(d.table,{children:[(0,t.jsx)(d.thead,{children:(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.th,{children:"Property"}),(0,t.jsx)(d.th,{children:"Type"}),(0,t.jsx)(d.th,{children:"Description"})]})}),(0,t.jsxs)(d.tbody,{children:[(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"maxReturnPayloadSize"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"number"})}),(0,t.jsx)(d.td,{children:"The maximum allowed return payload size in bytes. If this size is exceeded a DbServerError will be thrown. If omitted the value specified during connection creation is used."})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"requestId"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"string"})}),(0,t.jsxs)(d.td,{children:["A request/trace ID to be passed to MVIS as a request header with the key ",(0,t.jsx)(d.code,{children:"X-MVIS-Trace-Id"})]})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"userDefined"})}),(0,t.jsx)(d.td,{children:(0,t.jsx)(d.code,{children:"object"})}),(0,t.jsxs)(d.td,{children:["The ",(0,t.jsx)(d.a,{href:"model_user_defined_options",children:"user defined options"})," to pass to the database subroutines"]})]})]})]}),"\n",(0,t.jsx)(d.h3,{id:"example",children:"Example"}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-ts",children:"const Encoded = connection.model(null, 'SOME_DIRECTORY');\n\nconst encoded = await Encoded.readFileContentsById('SOME_FILE');\n"})}),"\n",(0,t.jsx)(d.h3,{id:"how-it-works",children:"How It Works"}),"\n",(0,t.jsx)(d.p,{children:"The general workflow of this method is as follows:"}),"\n",(0,t.jsxs)(d.ol,{children:["\n",(0,t.jsxs)(d.li,{children:["Read the ",(0,t.jsx)(d.code,{children:"VOC"})," record for the file which was used to create the ",(0,t.jsx)(d.code,{children:"Model"})]}),"\n",(0,t.jsxs)(d.li,{children:["Take the path to the file from attribute 2 of the ",(0,t.jsx)(d.code,{children:"VOC"})," record"]}),"\n",(0,t.jsxs)(d.li,{children:["Append a ",(0,t.jsx)(d.code,{children:"/"})," and the id specified to the path"]}),"\n",(0,t.jsxs)(d.li,{children:["Read and encode the contents of the file by passing the full path to the MultiValue Basic ",(0,t.jsx)(d.code,{children:"encode"})," function."]}),"\n"]})]})}function h(e={}){const{wrapper:d}={...(0,s.R)(),...e.components};return d?(0,t.jsx)(d,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,d,n)=>{n.d(d,{R:()=>o,x:()=>r});var t=n(6540);const s={},i=t.createContext(s);function o(e){const d=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(d):{...d,...e}}),[d,e])}function r(e){let d;return d=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:d},e.children)}}}]);