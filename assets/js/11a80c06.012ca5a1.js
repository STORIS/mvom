"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1023],{5073:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>r});var a=n(4848),o=n(8453);const s={id:"schema_type_boolean",title:"Boolean"},l="Boolean Schema Type",i={id:"Schema/Scalar Schema Types/schema_type_boolean",title:"Boolean",description:"The Boolean schema type allows you to work with boolean values.",source:"@site/docs/03 - Schema/02 - Scalar Schema Types/02 - Boolean.md",sourceDirName:"03 - Schema/02 - Scalar Schema Types",slug:"/Schema/Scalar Schema Types/schema_type_boolean",permalink:"/mvom/docs/Schema/Scalar Schema Types/schema_type_boolean",draft:!1,unlisted:!1,editUrl:"https://github.com/STORIS/mvom/tree/main/website/docs/03 - Schema/02 - Scalar Schema Types/02 - Boolean.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"schema_type_boolean",title:"Boolean"},sidebar:"docsSidebar",previous:{title:"String",permalink:"/mvom/docs/Schema/Scalar Schema Types/schema_type_string"},next:{title:"Number",permalink:"/mvom/docs/Schema/Scalar Schema Types/schema_type_number"}},c={},r=[{value:"Schema Definition Properties",id:"schema-definition-properties",level:2},{value:"Formatting",id:"formatting",level:2},{value:"Example",id:"example",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"boolean-schema-type",children:"Boolean Schema Type"}),"\n",(0,a.jsx)(t.p,{children:"The Boolean schema type allows you to work with boolean values."}),"\n",(0,a.jsx)(t.h2,{id:"schema-definition-properties",children:"Schema Definition Properties"}),"\n",(0,a.jsxs)(t.p,{children:["In addition to the ",(0,a.jsx)(t.a,{href:"../schema_basics#properties-common-to-all-schema-definition-types",children:"base schema definition properties"})," the ",(0,a.jsx)(t.code,{children:"boolean"})," type has the following additional properties:"]}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:"Property"}),(0,a.jsx)(t.th,{children:"Type"}),(0,a.jsx)(t.th,{style:{textAlign:"center"},children:"Mandatory"}),(0,a.jsx)(t.th,{children:"Default"}),(0,a.jsx)(t.th,{children:"Description"})]})}),(0,a.jsx)(t.tbody,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"type"})}),(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:'"boolean"'})}),(0,a.jsx)(t.td,{style:{textAlign:"center"},children:"\u2714\ufe0f"}),(0,a.jsx)(t.td,{}),(0,a.jsx)(t.td,{children:"The type literal for a boolean schema type"})]})})]}),"\n",(0,a.jsx)(t.h2,{id:"formatting",children:"Formatting"}),"\n",(0,a.jsx)(t.p,{children:"Boolean schema types will be transformed to and from MultiValue booleans and JavaScript booleans."}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:"Database Value"}),(0,a.jsx)(t.th,{children:"JavaScript Value"})]})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"0"})}),(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"false"})})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"1"})}),(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"true"})})]})]})]}),"\n",(0,a.jsxs)(t.admonition,{type:"info",children:[(0,a.jsxs)(t.p,{children:['All "truthy" values from the database will be transformed to ',(0,a.jsx)(t.code,{children:"true"})," and all other values will be transformed to ",(0,a.jsx)(t.code,{children:"false"}),". That is, if you map a database value as ",(0,a.jsx)(t.code,{children:"boolean"})," and the physical database value is not a ",(0,a.jsx)(t.code,{children:"0"})," or a ",(0,a.jsx)(t.code,{children:"1"}),", then the output results will be based on the JavaScript engine's evaluation of truthy and falsy."]}),(0,a.jsxs)(t.p,{children:["If you allow Boolean values to be ",(0,a.jsx)(t.code,{children:"null"})," but that does not imply ",(0,a.jsx)(t.code,{children:"false"})," (i.e. there are 3 possible states), you should use a ",(0,a.jsx)(t.code,{children:"string"})," type with an ",(0,a.jsx)(t.code,{children:"enum"})," constraint."]})]}),"\n",(0,a.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"const schemaDefinition = {\n  booleanProperty: {\n    type: 'boolean',\n    path: 1,\n    dictionary: 'BOOLEAN_DICT',\n  },\n};\n\nconst schema = new Schema(schemaDefinition);\n"})})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>i});var a=n(6540);const o={},s=a.createContext(o);function l(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);