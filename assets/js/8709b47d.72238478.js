"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[656],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=a.createContext({}),p=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(m.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,m=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),s=p(n),d=r,h=s["".concat(m,".").concat(d)]||s[d]||u[d]||i;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=s;var o={};for(var m in t)hasOwnProperty.call(t,m)&&(o[m]=t[m]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},2689:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return m},default:function(){return d},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return u}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=["components"],o={id:"schema_type_number",title:"Number"},m="Number Schema Type",p={unversionedId:"Schema/Scalar Schema Types/schema_type_number",id:"Schema/Scalar Schema Types/schema_type_number",title:"Number",description:"The number schema type allows you to work with numeric values.",source:"@site/docs/03 - Schema/02 - Scalar Schema Types/03 - Number.md",sourceDirName:"03 - Schema/02 - Scalar Schema Types",slug:"/Schema/Scalar Schema Types/schema_type_number",permalink:"/mvom/docs/Schema/Scalar Schema Types/schema_type_number",draft:!1,editUrl:"https://github.com/STORIS/mvom/tree/main/website/docs/03 - Schema/02 - Scalar Schema Types/03 - Number.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"schema_type_number",title:"Number"},sidebar:"docsSidebar",previous:{title:"Boolean",permalink:"/mvom/docs/Schema/Scalar Schema Types/schema_type_boolean"},next:{title:"ISOCalendarDate",permalink:"/mvom/docs/Schema/Scalar Schema Types/schema_type_isocalendardate"}},c={},u=[{value:"Schema Definition Properties",id:"schema-definition-properties",level:2},{value:"Formatting",id:"formatting",level:2},{value:"Example",id:"example",level:2}],s={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"number-schema-type"},"Number Schema Type"),(0,i.kt)("p",null,"The number schema type allows you to work with numeric values."),(0,i.kt)("h2",{id:"schema-definition-properties"},"Schema Definition Properties"),(0,i.kt)("p",null,"In addition to the ",(0,i.kt)("a",{parentName:"p",href:"../schema_basics#properties-common-to-all-schema-definitions"},"base schema definition properties")," the ",(0,i.kt)("inlineCode",{parentName:"p"},"number")," type has the following additional properties:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Property"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Mandatory"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"type")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'"number"')),(0,i.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"The type literal for a number schema type")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"dbDecimals")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"number")),(0,i.kt)("td",{parentName:"tr",align:"center"}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"0")),(0,i.kt)("td",{parentName:"tr",align:null},"If specified, decimal values will be converted to and from MultiValue internal format using this number of implied decimal places")))),(0,i.kt)("h2",{id:"formatting"},"Formatting"),(0,i.kt)("p",null,"A number schema type will be formatted based upon the value of the ",(0,i.kt)("inlineCode",{parentName:"p"},"dbDecimals")," property in the definition. For instance, if you had a ",(0,i.kt)("inlineCode",{parentName:"p"},"dbDecimals")," value of ",(0,i.kt)("inlineCode",{parentName:"p"},"2"),", the following formats would be applied:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Database Value"),(0,i.kt)("th",{parentName:"tr",align:null},"JavaScript Value"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"12345")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"123.45"))))),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const schemaDefinition = {\n  numberProperty: {\n    type: 'number',\n    path: 1,\n    dictionary: 'NUMBER_DICT',\n    dbDecimals: 2,\n  },\n};\n\nconst schema = new Schema(schemaDefinition);\n")))}d.isMDXComponent=!0}}]);