"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[753],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),p=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(n),u=a,k=m["".concat(d,".").concat(u)]||m[u]||s[u]||o;return n?r.createElement(k,l(l({ref:t},c),{},{components:n})):r.createElement(k,l({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9039:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return d},default:function(){return u},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return s}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),l=["components"],i={id:"model_deletion",title:"Deleting a Model"},d="Deleting a Model",p={unversionedId:"Model/model_deletion",id:"Model/model_deletion",title:"Deleting a Model",description:"MVOM allows deleting database records by specifying the iD to the record. The Model class exposes a static method deleteById to support this ability.",source:"@site/docs/04 - Model/05 - Deleting a Model.md",sourceDirName:"04 - Model",slug:"/Model/model_deletion",permalink:"/mvom/docs/Model/model_deletion",draft:!1,editUrl:"https://github.com/STORIS/mvom/tree/main/website/docs/04 - Model/05 - Deleting a Model.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"model_deletion",title:"Deleting a Model"},sidebar:"docsSidebar",previous:{title:"Saving a Model",permalink:"/mvom/docs/Model/model_saving"},next:{title:"Query Basics",permalink:"/mvom/docs/Model/Querying/model_query_basics"}},c={},s=[{value:"deleteById Method",id:"deletebyid-method",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Options Object Properties",id:"options-object-properties",level:4},{value:"Example",id:"example",level:3},{value:"Record Delete Notes",id:"record-delete-notes",level:2},{value:"Record Locks",id:"record-locks",level:3}],m={toc:s};function u(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"deleting-a-model"},"Deleting a Model"),(0,o.kt)("p",null,"MVOM allows deleting database records by specifying the iD to the record. The ",(0,o.kt)("inlineCode",{parentName:"p"},"Model")," class exposes a static method ",(0,o.kt)("inlineCode",{parentName:"p"},"deleteById")," to support this ability."),(0,o.kt)("h2",{id:"deletebyid-method"},"deleteById Method"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"deleteById")," static method is available on all ",(0,o.kt)("inlineCode",{parentName:"p"},"Model")," classes. It allows a consumer to specify a record id which will initiate a call to the MultiValue database to delete that record. It will return an instance of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Model")," that contains the data from the record at the time of deletion. If no record with that ID exists, ",(0,o.kt)("inlineCode",{parentName:"p"},"null")," will be returned."),(0,o.kt)("h3",{id:"syntax"},"Syntax"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"static deleteById(id: string, options?: ModelDeleteByIdOptions): Promise<Model | null>\n")),(0,o.kt)("h3",{id:"parameters"},"Parameters"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"id")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"string")),(0,o.kt)("td",{parentName:"tr",align:null},"The record ID of the record to read")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"options")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"object")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#options-object-properties"},"Options object")," (see below)")))),(0,o.kt)("h4",{id:"options-object-properties"},"Options Object Properties"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Property"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"userDefined")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"object")),(0,o.kt)("td",{parentName:"tr",align:null},"The ",(0,o.kt)("a",{parentName:"td",href:"./Advanced%20Topics/model_user_defined_options"},"user defined options")," to pass to the database subroutines")))),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const schema = new Schema({\n  description: { type: 'string', path: 1 },\n  price: { type: 'number', path: 2, dbDecimals: 2 },\n});\n\nconst Item = connection.model(schema, 'ITEM');\n\nconst deletedItem = await Item.deleteById('0001');\n")),(0,o.kt)("h2",{id:"record-delete-notes"},"Record Delete Notes"),(0,o.kt)("h3",{id:"record-locks"},"Record Locks"),(0,o.kt)("p",null,"MVOM will reject any database deletes for a record that is currently locked (e.g. a ",(0,o.kt)("inlineCode",{parentName:"p"},"READU")," statement). In this scenario, ",(0,o.kt)("inlineCode",{parentName:"p"},"deleteById")," will reject with a ",(0,o.kt)("inlineCode",{parentName:"p"},"RecordLockedError"),"."))}u.isMDXComponent=!0}}]);