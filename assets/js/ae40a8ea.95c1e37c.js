"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[266],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return u}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var m=n.createContext({}),d=function(e){var t=n.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(m.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,m=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),s=d(a),u=r,h=s["".concat(m,".").concat(u)]||s[u]||c[u]||i;return a?n.createElement(h,l(l({ref:t},p),{},{components:a})):n.createElement(h,l({ref:t},p))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=s;var o={};for(var m in t)hasOwnProperty.call(t,m)&&(o[m]=t[m]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=a[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}s.displayName="MDXCreateElement"},8034:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return m},default:function(){return u},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return c}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),l=["components"],o={id:"schema_type_isocalendardatetime",title:"ISOCalendarDateTime"},m="ISOCalendarDateTime Schema Type",d={unversionedId:"Schema/Scalar Schema Types/schema_type_isocalendardatetime",id:"Schema/Scalar Schema Types/schema_type_isocalendardatetime",title:"ISOCalendarDateTime",description:"The ISOCalendarDateTime schema type allow you to work with compound date-time values.",source:"@site/docs/03 - Schema/02 - Scalar Schema Types/06 - ISOCalendarDateTime.md",sourceDirName:"03 - Schema/02 - Scalar Schema Types",slug:"/Schema/Scalar Schema Types/schema_type_isocalendardatetime",permalink:"/mvom/docs/Schema/Scalar Schema Types/schema_type_isocalendardatetime",draft:!1,editUrl:"https://github.com/STORIS/mvom/tree/main/website/docs/03 - Schema/02 - Scalar Schema Types/06 - ISOCalendarDateTime.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{id:"schema_type_isocalendardatetime",title:"ISOCalendarDateTime"},sidebar:"docsSidebar",previous:{title:"ISOTime",permalink:"/mvom/docs/Schema/Scalar Schema Types/schema_type_isotime"},next:{title:"Schema Options",permalink:"/mvom/docs/Schema/schema_options"}},p={},c=[{value:"Schema Definition Properties",id:"schema-definition-properties",level:2},{value:"Formatting",id:"formatting",level:2},{value:"dbFormat = &quot;s&quot;",id:"dbformat--s",level:3},{value:"dbFormat = &quot;ms&quot;",id:"dbformat--ms",level:3},{value:"Example",id:"example",level:2}],s={toc:c};function u(e){var t=e.components,a=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"isocalendardatetime-schema-type"},"ISOCalendarDateTime Schema Type"),(0,i.kt)("p",null,"The ISOCalendarDateTime schema type allow you to work with compound date-time values."),(0,i.kt)("h2",{id:"schema-definition-properties"},"Schema Definition Properties"),(0,i.kt)("p",null,"In addition to the ",(0,i.kt)("a",{parentName:"p",href:"../schema_basics#properties-common-to-all-schema-definitions"},"base schema definition properties")," the ",(0,i.kt)("inlineCode",{parentName:"p"},"ISOCalendarDateTime")," type has the following additional properties:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Property"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:"center"},"Mandatory"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"type")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'"ISOCalendarDateTime"')),(0,i.kt)("td",{parentName:"tr",align:"center"},"\u2714\ufe0f"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"The type literal for an ISOCalendarDateTime schema type")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"dbFormat")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'"s"')," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},'"ms"')),(0,i.kt)("td",{parentName:"tr",align:"center"}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'"ms"')),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'"s"')," denotes internal time is in seconds",(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},'"ms"')," denotes internal time is in milliseconds")))),(0,i.kt)("h2",{id:"formatting"},"Formatting"),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This is not a standard MultiValue internally formatted data type."))),(0,i.kt)("p",null,"An ISOCalendarDateTime schema type will be transformed to and from an internal date-time representation to ISO 8601 times (",(0,i.kt)("inlineCode",{parentName:"p"},"YYYY-MM-DDTHH:MM:SS.SSS"),"). The transformations are conditional based upon the ",(0,i.kt)("inlineCode",{parentName:"p"},"dbFormat")," property value."),(0,i.kt)("h3",{id:"dbformat--s"},'dbFormat = "s"'),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Database Value"),(0,i.kt)("th",{parentName:"tr",align:null},"JavaScript Value"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"0.00000")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'"1967-12-31T00:00:00.000"'))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"19864.43200")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'"2022-05-20T12:00:00.000"'))))),(0,i.kt)("h3",{id:"dbformat--ms"},'dbFormat = "ms"'),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Database Value"),(0,i.kt)("th",{parentName:"tr",align:null},"JavaScript Value"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"0.00000000")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'"1967-12-31T00:00:00.000"'))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"19864.43200123")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'"2022-05-20T12:00:00.123"'))))),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const schemaDefinition = {\n  dateTimeProperty: {\n    type: 'ISOCalendarDateTime',\n    path: 1,\n    dictionary: 'DATE_TIME_DICT',\n    required: true,\n    dbFormat: 'ms',\n  },\n};\n\nconst schema = new Schema(schemaDefinition);\n")))}u.isMDXComponent=!0}}]);