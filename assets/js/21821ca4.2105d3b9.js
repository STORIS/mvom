"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[858],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return h}});var a=r(7294);function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){l(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,l=function(e,t){if(null==e)return{};var r,a,l={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(l[r]=e[r]);return l}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(l[r]=e[r])}return l}var p=a.createContext({}),s=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,l=e.mdxType,n=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=s(r),h=l,m=c["".concat(p,".").concat(h)]||c[h]||d[h]||n;return r?a.createElement(m,o(o({ref:t},u),{},{components:r})):a.createElement(m,o({ref:t},u))}));function h(e,t){var r=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var n=r.length,o=new Array(n);o[0]=c;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:l,o[1]=i;for(var s=2;s<n;s++)o[s]=r[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},2157:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return h},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return d}});var a=r(7462),l=r(3366),n=(r(7294),r(3905)),o=["components"],i={id:"model_query_operators",title:"Query Conditional Operators"},p="Query Conditional Operators",s={unversionedId:"Model/Querying/model_query_operators",id:"Model/Querying/model_query_operators",title:"Query Conditional Operators",description:"MVOM supports a number of query operators to use for filtering the results of a query.",source:"@site/docs/04 - Model/06 - Querying/02 - Query Operators.md",sourceDirName:"04 - Model/06 - Querying",slug:"/Model/Querying/model_query_operators",permalink:"/mvom/docs/Model/Querying/model_query_operators",draft:!1,editUrl:"https://github.com/STORIS/mvom/tree/main/website/docs/04 - Model/06 - Querying/02 - Query Operators.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"model_query_operators",title:"Query Conditional Operators"},sidebar:"docsSidebar",previous:{title:"Query Basics",permalink:"/mvom/docs/Model/Querying/model_query_basics"},next:{title:"Combining Multiple Operators",permalink:"/mvom/docs/Model/Querying/model_query_multiple_operators"}},u={},d=[{value:"Equality Operator",id:"equality-operator",level:2},{value:"Example",id:"example",level:3},{value:"Implicit Equality Operator",id:"implicit-equality-operator",level:3},{value:"Example",id:"example-1",level:4},{value:"Greater than operator",id:"greater-than-operator",level:2},{value:"Example",id:"example-2",level:3},{value:"Greater than or equal to operator",id:"greater-than-or-equal-to-operator",level:2},{value:"Example",id:"example-3",level:3},{value:"Less than operator",id:"less-than-operator",level:2},{value:"Example",id:"example-4",level:3},{value:"Less than or equal to operator",id:"less-than-or-equal-to-operator",level:2},{value:"Example",id:"example-5",level:3},{value:"Not Equal Operator",id:"not-equal-operator",level:2},{value:"Example",id:"example-6",level:3},{value:"Contains operator",id:"contains-operator",level:2},{value:"Example",id:"example-7",level:3},{value:"Starts With Operator",id:"starts-with-operator",level:2},{value:"Example",id:"example-8",level:3},{value:"Ends With Operator",id:"ends-with-operator",level:2},{value:"Example",id:"example-9",level:3},{value:"In Operator",id:"in-operator",level:2},{value:"Example",id:"example-10",level:3},{value:"Implicit In Operator",id:"implicit-in-operator",level:3},{value:"Example",id:"example-11",level:4},{value:"Not In Operator",id:"not-in-operator",level:2},{value:"Example",id:"example-12",level:3}],c={toc:d};function h(e){var t=e.components,r=(0,l.Z)(e,o);return(0,n.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"query-conditional-operators"},"Query Conditional Operators"),(0,n.kt)("p",null,"MVOM supports a number of query operators to use for filtering the results of a query."),(0,n.kt)("p",null,"All examples on this page are working with a ",(0,n.kt)("inlineCode",{parentName:"p"},"Model")," constructed in the following manner:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const schema = new Schema({\n  description: { type: 'string', path: 1, dictionary: 'DESCRIPTION' },\n  price: { type: 'number', path: 2, dbDecimals: 2, dictionary: 'PRICE' },\n});\n\nconst Item = connection.model(schema, 'ITEM');\n")),(0,n.kt)("h2",{id:"equality-operator"},"Equality Operator"),(0,n.kt)("p",null,"The equality operator is ",(0,n.kt)("inlineCode",{parentName:"p"},"$eq"),". This operator will find records where the property's value is equal to the provided conditional value."),(0,n.kt)("h3",{id:"example"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const items = await Item.find({ price: { $eq: 100 } });\n")),(0,n.kt)("p",null,"The query which will be executed on the MultiValue database is:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'select ITEM with PRICE = "100"\n')),(0,n.kt)("h3",{id:"implicit-equality-operator"},"Implicit Equality Operator"),(0,n.kt)("p",null,"When querying for equality, it is not necessary to use the ",(0,n.kt)("inlineCode",{parentName:"p"},"$eq")," operator. The following query condition filter object format will implicitly assume equality without the need for specifying the ",(0,n.kt)("inlineCode",{parentName:"p"},"$eq")," operator."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  propertyName: conditionalValue;\n}\n")),(0,n.kt)("h4",{id:"example-1"},"Example"),(0,n.kt)("p",null,"This example illustrates using the implicit equality syntax to execute the same query as shown using the explicit equality operator."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const items = await Item.find({ price: 100 });\n")),(0,n.kt)("p",null,"The query which will be executed on the MultiValue database is:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'select ITEM with PRICE = "100"\n')),(0,n.kt)("h2",{id:"greater-than-operator"},"Greater than operator"),(0,n.kt)("p",null,"The greater than operator is ",(0,n.kt)("inlineCode",{parentName:"p"},"$gt"),". This operator will find records where the property's value is greater than the provided conditional value."),(0,n.kt)("h3",{id:"example-2"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const items = await Item.find({ price: { $gt: 100 } });\n")),(0,n.kt)("p",null,"The query which will be executed on the MultiValue database is:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'select ITEM with PRICE > "100"\n')),(0,n.kt)("h2",{id:"greater-than-or-equal-to-operator"},"Greater than or equal to operator"),(0,n.kt)("p",null,"The greater than or equal to operator is ",(0,n.kt)("inlineCode",{parentName:"p"},"$gte"),". This operator will find records where the property's value is greater than or equal to the provided conditional value."),(0,n.kt)("h3",{id:"example-3"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const items = await Item.find({ price: { $gte: 100 } });\n")),(0,n.kt)("p",null,"The query which will be executed on the MultiValue database is:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'select ITEM with PRICE >= "100"\n')),(0,n.kt)("h2",{id:"less-than-operator"},"Less than operator"),(0,n.kt)("p",null,"The less than operator is ",(0,n.kt)("inlineCode",{parentName:"p"},"$lt"),". This operator will find records where the property's value is less than the provided conditional value."),(0,n.kt)("h3",{id:"example-4"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const items = await Item.find({ price: { $lt: 100 } });\n")),(0,n.kt)("p",null,"The query which will be executed on the MultiValue database is:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'select ITEM with PRICE < "100"\n')),(0,n.kt)("h2",{id:"less-than-or-equal-to-operator"},"Less than or equal to operator"),(0,n.kt)("p",null,"The less than or equal to operator is ",(0,n.kt)("inlineCode",{parentName:"p"},"$lte"),". This operator will find records where the property's value is less than or equal to the provided conditional value."),(0,n.kt)("h3",{id:"example-5"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const items = await Item.find({ price: { $lte: 100 } });\n")),(0,n.kt)("p",null,"The query which will be executed on the MultiValue database is:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'select ITEM with PRICE <= "100"\n')),(0,n.kt)("h2",{id:"not-equal-operator"},"Not Equal Operator"),(0,n.kt)("p",null,"The not equal operator is ",(0,n.kt)("inlineCode",{parentName:"p"},"$ne"),". This operator will find records where the property's value is not equal to the provided conditional value."),(0,n.kt)("h3",{id:"example-6"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const items = await Item.find({ price: { $ne: 100 } });\n")),(0,n.kt)("p",null,"The query which will be executed on the MultiValue database is:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'select ITEM with PRICE # "100"\n')),(0,n.kt)("h2",{id:"contains-operator"},"Contains operator"),(0,n.kt)("p",null,"The contains operator is ",(0,n.kt)("inlineCode",{parentName:"p"},"$contains"),". This operator will find records where the property's value contains the provided conditional value."),(0,n.kt)("h3",{id:"example-7"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const items = await Item.find({ description: { $contains: 'Bed' } });\n")),(0,n.kt)("p",null,"The query which will be executed on the MultiValue database is:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'select ITEM with DESCRIPTION like "...Bed..."\n')),(0,n.kt)("h2",{id:"starts-with-operator"},"Starts With Operator"),(0,n.kt)("p",null,"The starts with operator is ",(0,n.kt)("inlineCode",{parentName:"p"},"$startsWith"),". This operator will find records where the property's value starts with the provided conditional value."),(0,n.kt)("h3",{id:"example-8"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const items = await Item.find({ description: { $startsWith: 'Bed' } });\n")),(0,n.kt)("p",null,"The query which will be executed on the MultiValue database is:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'select ITEM with DESCRIPTION like "Bed..."\n')),(0,n.kt)("h2",{id:"ends-with-operator"},"Ends With Operator"),(0,n.kt)("p",null,"The ends with operator is ",(0,n.kt)("inlineCode",{parentName:"p"},"$endsWith"),". This operator will find records where the property's value ends with the provided conditional value."),(0,n.kt)("h3",{id:"example-9"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const items = await Item.find({ description: { $endsWith: 'Bed' } });\n")),(0,n.kt)("p",null,"The query which will be executed on the MultiValue database is:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'select ITEM with DESCRIPTION like "...Bed"\n')),(0,n.kt)("h2",{id:"in-operator"},"In Operator"),(0,n.kt)("p",null,"The in operator is ",(0,n.kt)("inlineCode",{parentName:"p"},"$in"),". Unlike most other operators, the ",(0,n.kt)("inlineCode",{parentName:"p"},"$in")," operator accepts an array of conditional values. This operator will find records where the property's value is equal to any of the values provided in the array."),(0,n.kt)("h3",{id:"example-10"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const items = await Item.find({ description: { $in: ['Bed', 'Chair', 'Couch'] } });\n")),(0,n.kt)("p",null,"The query which will be executed on the MultiValue database is:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'select ITEM with (DESCRIPTION = "Bed" or DESCRIPTION = "Chair" or DESCRIPTION = "Couch")\n')),(0,n.kt)("h3",{id:"implicit-in-operator"},"Implicit In Operator"),(0,n.kt)("p",null,"When querying for properties matching any of a list, it is not necessary to use the ",(0,n.kt)("inlineCode",{parentName:"p"},"$in"),' operator. The following query condition filter object format will implicitly assume "in" without the need for specifying the ',(0,n.kt)("inlineCode",{parentName:"p"},"$in")," operator. This works similarly to the ",(0,n.kt)("a",{parentName:"p",href:"#implicit-equality-operator"},"implicit equality operator")," except the conditional value will be an array."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  propertyName: [conditionalValue1, conditionalValue2];\n}\n")),(0,n.kt)("h4",{id:"example-11"},"Example"),(0,n.kt)("p",null,"This example illustrates using the implicit in operator syntax to execute the same query as shown using the explicit in operator."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const items = await Item.find({ description: ['Bed', 'Chair', 'Couch'] });\n")),(0,n.kt)("p",null,"The query which will be executed on the MultiValue database is:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'select ITEM with (DESCRIPTION = "Bed" or DESCRIPTION = "Chair" or DESCRIPTION = "Couch")\n')),(0,n.kt)("h2",{id:"not-in-operator"},"Not In Operator"),(0,n.kt)("p",null,"The not in operator is ",(0,n.kt)("inlineCode",{parentName:"p"},"$nin"),". Unlike most other operators, the ",(0,n.kt)("inlineCode",{parentName:"p"},"$nin")," operator accepts an array of conditional values. This operator will find records where the property's value is not equal to any of the values provided in the array."),(0,n.kt)("h3",{id:"example-12"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"const items = await Item.find({ description: { $nin: ['Bed', 'Chair', 'Couch'] } });\n")),(0,n.kt)("p",null,"The query which will be executed on the MultiValue database is:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'select ITEM with (DESCRIPTION # "Bed" and DESCRIPTION # "Chair" and DESCRIPTION # "Couch")\n')))}h.isMDXComponent=!0}}]);