"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[301],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),m=s(n),d=i,y=m["".concat(l,".").concat(d)]||m[d]||c[d]||o;return n?r.createElement(y,a(a({ref:t},u),{},{components:n})):r.createElement(y,a({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:i,a[1]=p;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8773:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return p},metadata:function(){return s},toc:function(){return c}});var r=n(7462),i=n(3366),o=(n(7294),n(3905)),a=["components"],p={id:"model_query_pagination",title:"Pagination"},l="Pagination",s={unversionedId:"Model/Querying/model_query_pagination",id:"Model/Querying/model_query_pagination",title:"Pagination",description:"MVOM allows queries to be specified that limit the number of results returned from a query and to skip a number of results that are returned by a query. This is performed using the limit and skip properties of the query options. These properties can be used independently of one another, but typically they are used together in order to paginate queries.",source:"@site/docs/04 - Model/06 - Querying/04 - Pagination.md",sourceDirName:"04 - Model/06 - Querying",slug:"/Model/Querying/model_query_pagination",permalink:"/mvom/docs/Model/Querying/model_query_pagination",draft:!1,editUrl:"https://github.com/STORIS/mvom/tree/main/website/docs/04 - Model/06 - Querying/04 - Pagination.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"model_query_pagination",title:"Pagination"},sidebar:"docsSidebar",previous:{title:"Combining Multiple Operators",permalink:"/mvom/docs/Model/Querying/model_query_multiple_operators"},next:{title:"Sorting",permalink:"/mvom/docs/Model/Querying/model_query_sorting"}},u={},c=[{value:"Skip",id:"skip",level:2},{value:"Example",id:"example",level:3},{value:"Limit",id:"limit",level:2},{value:"Example",id:"example-1",level:3},{value:"Using Skip and Limit Together",id:"using-skip-and-limit-together",level:2}],m={toc:c};function d(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"pagination"},"Pagination"),(0,o.kt)("p",null,"MVOM allows queries to be specified that limit the number of results returned from a query and to skip a number of results that are returned by a query. This is performed using the ",(0,o.kt)("inlineCode",{parentName:"p"},"limit")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"skip")," properties of the ",(0,o.kt)("a",{parentName:"p",href:"model_query_basics#options-object-properties"},"query options"),". These properties can be used independently of one another, but typically they are used together in order to paginate queries."),(0,o.kt)("h2",{id:"skip"},"Skip"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"skip")," property allows the consumer to specify a number of query results to bypass when returning results from the server. For example, if a query returned 50 matching records, but a skip value of ",(0,o.kt)("inlineCode",{parentName:"p"},"10")," was provided as a query option then only records 11 through 50 would be returned from the query's execution."),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const schema = new Schema({\n  description: { type: 'string', path: 1, dictionary: 'DESCRIPTION' },\n  price: { type: 'number', path: 2, dbDecimals: 2, dictionary: 'PRICE' },\n});\n\nconst Item = connection.model(schema, 'ITEM');\n\nconst items = await Item.find({ price: { $gt: 100 } }, { skip: 10 });\n")),(0,o.kt)("h2",{id:"limit"},"Limit"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"limit")," property allows the consumer to specify how many results to return. Regardless of how many records match the query conditions, no more than the number specified by the ",(0,o.kt)("inlineCode",{parentName:"p"},"limit")," property will be returned by the query."),(0,o.kt)("h3",{id:"example-1"},"Example"),(0,o.kt)("p",null,"This example code will limit the number of results returned from the query to 100."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const schema = new Schema({\n  description: { type: 'string', path: 1, dictionary: 'DESCRIPTION' },\n  price: { type: 'number', path: 2, dbDecimals: 2, dictionary: 'PRICE' },\n});\n\nconst Item = connection.model(schema, 'ITEM');\n\nconst items = await Item.find({ price: { $gt: 100 } }, { limit: 100 });\n")),(0,o.kt)("h2",{id:"using-skip-and-limit-together"},"Using Skip and Limit Together"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"skip")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"limit")," can be combined in order to paginate query results. Generally speaking, to paginate you would choose a constant ",(0,o.kt)("inlineCode",{parentName:"p"},"limit")," value to define the number of results per page, but then increment the ",(0,o.kt)("inlineCode",{parentName:"p"},"skip")," value by the value of the ",(0,o.kt)("inlineCode",{parentName:"p"},"limit")," for each subsequent page."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const schema = new Schema({\n  description: { type: 'string', path: 1, dictionary: 'DESCRIPTION' },\n  price: { type: 'number', path: 2, dbDecimals: 2, dictionary: 'PRICE' },\n});\n\nconst Item = connection.model(schema, 'ITEM');\n\nconst firstPage = await Item.find({ price: { $gt: 100 } }, { limit: 100 });\nconst secondPage = await Item.find({ price: { $gt: 100 } }, { skip: 100, limit: 100 });\nconst thirdPage = await Item.find({ price: { $gt: 100 } }, { skip: 200, limit: 100 });\n")))}d.isMDXComponent=!0}}]);