"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1688],{7808:(e,t,d)=>{d.r(t),d.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Model/model_deletion","title":"Deleting a Model","description":"MVOM allows deleting database records by specifying the iD to the record. The Model class exposes a static method deleteById to support this ability.","source":"@site/docs/04 - Model/05 - Deleting a Model.md","sourceDirName":"04 - Model","slug":"/Model/model_deletion","permalink":"/mvom/docs/Model/model_deletion","draft":false,"unlisted":false,"editUrl":"https://github.com/STORIS/mvom/tree/main/website/docs/04 - Model/05 - Deleting a Model.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"model_deletion","title":"Deleting a Model"},"sidebar":"docsSidebar","previous":{"title":"Saving a Model","permalink":"/mvom/docs/Model/model_saving"},"next":{"title":"Query Basics","permalink":"/mvom/docs/Model/Querying/model_query_basics"}}');var r=d(4848),n=d(8453);const i={id:"model_deletion",title:"Deleting a Model"},l="Deleting a Model",o={},c=[{value:"deleteById Method",id:"deletebyid-method",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Options Object Properties",id:"options-object-properties",level:4},{value:"Example",id:"example",level:3},{value:"Record Delete Notes",id:"record-delete-notes",level:2},{value:"Record Locks",id:"record-locks",level:3}];function a(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"deleting-a-model",children:"Deleting a Model"})}),"\n",(0,r.jsxs)(t.p,{children:["MVOM allows deleting database records by specifying the iD to the record. The ",(0,r.jsx)(t.code,{children:"Model"})," class exposes a static method ",(0,r.jsx)(t.code,{children:"deleteById"})," to support this ability."]}),"\n",(0,r.jsx)(t.h2,{id:"deletebyid-method",children:"deleteById Method"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"deleteById"})," static method is available on all ",(0,r.jsx)(t.code,{children:"Model"})," classes. It allows a consumer to specify a record id which will initiate a call to the MultiValue database to delete that record. It will return an instance of the ",(0,r.jsx)(t.code,{children:"Model"})," that contains the data from the record at the time of deletion. If no record with that ID exists, ",(0,r.jsx)(t.code,{children:"null"})," will be returned."]}),"\n",(0,r.jsx)(t.h3,{id:"syntax",children:"Syntax"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"static deleteById(id: string, options?: ModelDeleteByIdOptions): Promise<Model | null>\n"})}),"\n",(0,r.jsx)(t.h3,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Parameter"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"id"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"string"})}),(0,r.jsx)(t.td,{children:"The record ID of the record to read"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"options"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"object"})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.a,{href:"#options-object-properties",children:"Options object"})," (see below)"]})]})]})]}),"\n",(0,r.jsx)(t.h4,{id:"options-object-properties",children:"Options Object Properties"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Property"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"maxReturnPayloadSize"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"number"})}),(0,r.jsx)(t.td,{children:"The maximum allowed return payload size in bytes. If this size is exceeded a DbServerError will be thrown. If omitted the value specified during connection creation is used."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"requestId"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"string"})}),(0,r.jsxs)(t.td,{children:["A request/trace ID to be passed to MVIS as a request header with the key ",(0,r.jsx)(t.code,{children:"X-MVIS-Trace-Id"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"userDefined"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"object"})}),(0,r.jsxs)(t.td,{children:["The ",(0,r.jsx)(t.a,{href:"./Advanced%20Topics/model_user_defined_options",children:"user defined options"})," to pass to the database subroutines"]})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"example",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"const schema = new Schema({\n  description: { type: 'string', path: 1 },\n  price: { type: 'number', path: 2, dbDecimals: 2 },\n});\n\nconst Item = connection.model(schema, 'ITEM');\n\nconst deletedItem = await Item.deleteById('0001');\n"})}),"\n",(0,r.jsx)(t.h2,{id:"record-delete-notes",children:"Record Delete Notes"}),"\n",(0,r.jsx)(t.h3,{id:"record-locks",children:"Record Locks"}),"\n",(0,r.jsxs)(t.p,{children:["MVOM will reject any database deletes for a record that is currently locked (e.g. a ",(0,r.jsx)(t.code,{children:"READU"})," statement). In this scenario, ",(0,r.jsx)(t.code,{children:"deleteById"})," will reject with a ",(0,r.jsx)(t.code,{children:"RecordLockedError"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,t,d)=>{d.d(t,{R:()=>i,x:()=>l});var s=d(6540);const r={},n=s.createContext(r);function i(e){const t=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(n.Provider,{value:t},e.children)}}}]);