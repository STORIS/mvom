"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7178],{4097:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>o,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"Schema/Scalar Schema Types/schema_type_number","title":"Number","description":"The number schema type allows you to work with numeric values.","source":"@site/docs/03 - Schema/02 - Scalar Schema Types/03 - Number.md","sourceDirName":"03 - Schema/02 - Scalar Schema Types","slug":"/Schema/Scalar Schema Types/schema_type_number","permalink":"/mvom/docs/Schema/Scalar Schema Types/schema_type_number","draft":false,"unlisted":false,"editUrl":"https://github.com/STORIS/mvom/tree/main/website/docs/03 - Schema/02 - Scalar Schema Types/03 - Number.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"schema_type_number","title":"Number"},"sidebar":"docsSidebar","previous":{"title":"Boolean","permalink":"/mvom/docs/Schema/Scalar Schema Types/schema_type_boolean"},"next":{"title":"ISOCalendarDate","permalink":"/mvom/docs/Schema/Scalar Schema Types/schema_type_isocalendardate"}}');var s=n(4848),c=n(8453);const i={id:"schema_type_number",title:"Number"},a="Number Schema Type",d={},l=[{value:"Schema Definition Properties",id:"schema-definition-properties",level:2},{value:"Formatting",id:"formatting",level:2},{value:"Example",id:"example",level:2}];function h(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"number-schema-type",children:"Number Schema Type"})}),"\n",(0,s.jsx)(t.p,{children:"The number schema type allows you to work with numeric values."}),"\n",(0,s.jsx)(t.h2,{id:"schema-definition-properties",children:"Schema Definition Properties"}),"\n",(0,s.jsxs)(t.p,{children:["In addition to the ",(0,s.jsx)(t.a,{href:"../schema_basics#properties-common-to-all-schema-definition-types",children:"base schema definition properties"})," the ",(0,s.jsx)(t.code,{children:"number"})," type has the following additional properties:"]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Property"}),(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{style:{textAlign:"center"},children:"Mandatory"}),(0,s.jsx)(t.th,{children:"Default"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"type"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:'"number"'})}),(0,s.jsx)(t.td,{style:{textAlign:"center"},children:"\u2714\ufe0f"}),(0,s.jsx)(t.td,{}),(0,s.jsx)(t.td,{children:"The type literal for a number schema type"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"dbDecimals"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"number"})}),(0,s.jsx)(t.td,{style:{textAlign:"center"}}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"0"})}),(0,s.jsx)(t.td,{children:"If specified, decimal values will be converted to and from MultiValue internal format using this number of implied decimal places"})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"formatting",children:"Formatting"}),"\n",(0,s.jsxs)(t.p,{children:["A number schema type will be formatted based upon the value of the ",(0,s.jsx)(t.code,{children:"dbDecimals"})," property in the definition. For instance, if you had a ",(0,s.jsx)(t.code,{children:"dbDecimals"})," value of ",(0,s.jsx)(t.code,{children:"2"}),", the following formats would be applied:"]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Database Value"}),(0,s.jsx)(t.th,{children:"JavaScript Value"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"12345"})}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"123.45"})})]})})]}),"\n",(0,s.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"const schemaDefinition = {\n  numberProperty: {\n    type: 'number',\n    path: 1,\n    dictionary: 'NUMBER_DICT',\n    dbDecimals: 2,\n  },\n};\n\nconst schema = new Schema(schemaDefinition);\n"})})]})}function o(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var r=n(6540);const s={},c=r.createContext(s);function i(e){const t=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(c.Provider,{value:t},e.children)}}}]);