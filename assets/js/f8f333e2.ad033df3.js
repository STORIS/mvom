"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[414],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return u}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=d(a),u=r,h=m["".concat(s,".").concat(u)]||m[u]||p[u]||i;return a?n.createElement(h,o(o({ref:t},c),{},{components:a})):n.createElement(h,o({ref:t},c))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},6028:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return p}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),o=["components"],l={id:"model_basics",title:"Model Basics"},s="Model Basics",d={unversionedId:"Model/model_basics",id:"Model/model_basics",title:"Model Basics",description:"A Model is a special constructor which is derived from a Connection and a Schema instance. Model constructors are dynamically generated from the connection and schema and are the interface point to the MultiValue database. All of the logic for interacting with data therefore comes from a Model class.",source:"@site/docs/04 - Model/01 - Basics.md",sourceDirName:"04 - Model",slug:"/Model/model_basics",permalink:"/mvom/docs/Model/model_basics",draft:!1,editUrl:"https://github.com/STORIS/mvom/tree/main/website/docs/04 - Model/01 - Basics.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"model_basics",title:"Model Basics"},sidebar:"docsSidebar",previous:{title:"Encryption",permalink:"/mvom/docs/Schema/schema_encryption"},next:{title:"Creating a Model",permalink:"/mvom/docs/Model/model_creation"}},c={},p=[{value:"Creating a Model Constructor",id:"creating-a-model-constructor",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Example",id:"example",level:3},{value:"Model instances",id:"model-instances",level:2},{value:"The _id Property",id:"the-_id-property",level:3},{value:"Reading from the database",id:"reading-from-the-database",level:4},{value:"Writing to the database",id:"writing-to-the-database",level:4}],m={toc:p};function u(e){var t=e.components,a=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"model-basics"},"Model Basics"),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"Model")," is a special constructor which is derived from a ",(0,i.kt)("inlineCode",{parentName:"p"},"Connection")," and a ",(0,i.kt)("inlineCode",{parentName:"p"},"Schema")," instance. Model constructors are dynamically generated from the connection and schema and are the interface point to the MultiValue database. All of the logic for interacting with data therefore comes from a Model class."),(0,i.kt)("h2",{id:"creating-a-model-constructor"},"Creating a Model Constructor"),(0,i.kt)("p",null,"Each ",(0,i.kt)("inlineCode",{parentName:"p"},"Model")," constructor is unique. That is, there is no ",(0,i.kt)("inlineCode",{parentName:"p"},"Model")," constructor exported from MVOM. It is instead created at runtime by a consumer once a connection has been established and a schema defined."),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"Model")," first requires a ",(0,i.kt)("a",{parentName:"p",href:"../Schema/schema_basics"},"schema")," instance as well as an ",(0,i.kt)("a",{parentName:"p",href:"../connection#opening-a-connection"},"open database connection"),". Once those prerequisites have been met, a ",(0,i.kt)("inlineCode",{parentName:"p"},"Model")," can be created using the ",(0,i.kt)("inlineCode",{parentName:"p"},"model")," method of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Connection")," instance."),(0,i.kt)("h3",{id:"syntax"},"Syntax"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"model(schema: Schema | null, file: string): ModelConstructor\n")),(0,i.kt)("h3",{id:"parameters"},"Parameters"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"schema")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Schema")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"td"},"null")),(0,i.kt)("td",{parentName:"tr",align:null},"The instance of the ",(0,i.kt)("inlineCode",{parentName:"td"},"Schema")," class to associate with the model or ",(0,i.kt)("inlineCode",{parentName:"td"},"null")," for schemaless models")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"file")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"string")),(0,i.kt)("td",{parentName:"tr",align:null},"The name of the file in the MultiValue database")))),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const Item = connection.createModel(itemSchema, 'ITEM');\n")),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"By convention, a ",(0,i.kt)("inlineCode",{parentName:"p"},"Model")," has a capitalized first letter. This is because a ",(0,i.kt)("inlineCode",{parentName:"p"},"Model")," is a class constructor and by convention class constructors in many programming languages are capitalized. This is not enforced but strongly recommended."))),(0,i.kt)("h2",{id:"model-instances"},"Model instances"),(0,i.kt)("p",null,"An instance of a Model is a representation of data as defined by a Schema. That is, the properties of a Model are those which are described by the Schema. Records read from a MultiValue database will be transformed into a Model instance using the Schema. When saving to the database, a Model instance will be transformed into MultiValue delimited record format. Essentially, a Model instance is an object with a shape matching the schema which acts as an abstraction over the MultiValue data structure."),(0,i.kt)("h3",{id:"the-_id-property"},"The ","_","id Property"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"_id")," property is a special property that exists on all ",(0,i.kt)("inlineCode",{parentName:"p"},"Model")," instances. The ",(0,i.kt)("inlineCode",{parentName:"p"},"_id")," property of a model instance contains the database record ID that is associated with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Model")," instance. Once the ",(0,i.kt)("inlineCode",{parentName:"p"},"_id")," property has been set on a ",(0,i.kt)("inlineCode",{parentName:"p"},"Model")," instance, it will be immutable (read only) thereafter. This property is accessible to all ",(0,i.kt)("inlineCode",{parentName:"p"},"Model")," consumers for read access purposes to determine the record ID."),(0,i.kt)("h4",{id:"reading-from-the-database"},"Reading from the database"),(0,i.kt)("p",null,"When reading data from the database, the ",(0,i.kt)("inlineCode",{parentName:"p"},"_id")," property is automatically populated with the database record ID."),(0,i.kt)("h4",{id:"writing-to-the-database"},"Writing to the database"),(0,i.kt)("p",null,"Models can be instantiated without an ",(0,i.kt)("inlineCode",{parentName:"p"},"_id")," property. However, the ",(0,i.kt)("inlineCode",{parentName:"p"},"_id")," property ",(0,i.kt)("em",{parentName:"p"},"must")," be set prior to saving a Model or an error will be thrown. When saving, it will be the record ID used."))}u.isMDXComponent=!0}}]);