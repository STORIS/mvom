"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[424],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return O}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),s=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=s(e.components);return o.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},c=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),c=s(t),O=r,R=c["".concat(l,".").concat(O)]||c[O]||d[O]||i;return t?o.createElement(R,a(a({ref:n},p),{},{components:t})):o.createElement(R,a({ref:n},p))}));function O(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=c;var u={};for(var l in n)hasOwnProperty.call(n,l)&&(u[l]=n[l]);u.originalType=e,u.mdxType="string"==typeof e?e:r,a[1]=u;for(var s=2;s<i;s++)a[s]=t[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}c.displayName="MDXCreateElement"},7277:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return l},default:function(){return O},frontMatter:function(){return u},metadata:function(){return s},toc:function(){return d}});var o=t(7462),r=t(3366),i=(t(7294),t(3905)),a=["components"],u={id:"setup_and_configuration",title:"Setup and Configuration"},l="Setup and Configuration",s={unversionedId:"Introduction/setup_and_configuration",id:"Introduction/setup_and_configuration",title:"Setup and Configuration",description:"In order to communicate to the MultiValue database, the following are required:",source:"@site/docs/01 - Introduction/03 - Setup and Configuration.md",sourceDirName:"01 - Introduction",slug:"/Introduction/setup_and_configuration",permalink:"/mvom/docs/Introduction/setup_and_configuration",draft:!1,editUrl:"https://github.com/STORIS/mvom/tree/main/website/docs/01 - Introduction/03 - Setup and Configuration.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"setup_and_configuration",title:"Setup and Configuration"},sidebar:"docsSidebar",previous:{title:"Installation",permalink:"/mvom/docs/Introduction/installation"},next:{title:"Connection",permalink:"/mvom/docs/connection"}},p={},d=[{value:"Configuring the REST Server Subroutine Definition",id:"configuring-the-rest-server-subroutine-definition",level:2},{value:"How to find the subroutine version",id:"how-to-find-the-subroutine-version",level:3},{value:"Deploying the REST Server Subroutine Code",id:"deploying-the-rest-server-subroutine-code",level:2}],c={toc:d};function O(e){var n=e.components,u=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},c,u,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"setup-and-configuration"},"Setup and Configuration"),(0,i.kt)("p",null,"In order to communicate to the MultiValue database, the following are required:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"https://www.rocketsoftware.com/products/rocket-multivalue-integration-server"},"Rocket MultiValue Integration Server")," (MVIS)"),(0,i.kt)("li",{parentName:"ol"},"Account created, configured, and operational in MVIS for use with the REST server functionality",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Configuring an account is outside the scope of this documentation. Please consult the Rocket documentation for guidance on configuring an account in MVIS."))),(0,i.kt)("li",{parentName:"ol"},"A REST Server ",(0,i.kt)("inlineCode",{parentName:"li"},"Subroutine Resource")," definition for the MVOM MultiValue server BASIC subroutine configured in MVIS")),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"MVOM was created before the MultiValue Integration Server Admin had an API available which allowed for configuration. In a future release, we will look to automate the manual process defined below."))),(0,i.kt)("h2",{id:"configuring-the-rest-server-subroutine-definition"},"Configuring the REST Server Subroutine Definition"),(0,i.kt)("p",null,"MVOM requires the existence of a single REST Server ",(0,i.kt)("inlineCode",{parentName:"p"},"Subroutine Resource")," and for the corresponding BASIC subroutine to be deployed to the MultiValue database server. All of the configuration and deployment can be performed using the MVIS Admin software."),(0,i.kt)("p",null,"You must create a subroutine resource with the following properties:"),(0,i.kt)("figure",null,(0,i.kt)("p",null,(0,i.kt)("img",{alt:"MVIS Subroutine Definition",src:t(709).Z,width:"893",height:"432"})),(0,i.kt)("figcaption",{class:"figcaption-docs"},"Figure 1: Subroutine Details")),(0,i.kt)("p",null,"The subroutine has two parameters -- one for input to the subroutine and one for output from the subroutine. The following table shows the setup of those parameters:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Position"),(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Parameter Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Data Type"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"1"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"input")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"input")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"json"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"2"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"output")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"output")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"json"))))),(0,i.kt)("p",null,"The subroutine name must be in the format of ",(0,i.kt)("inlineCode",{parentName:"p"},"mvom_entry@{{subroutine_version}}")," with the ",(0,i.kt)("inlineCode",{parentName:"p"},"{{subroutine_version}}")," being replaced by the version of the subroutine used by your version of MVOM. In Figure 1 above, the version is ",(0,i.kt)("inlineCode",{parentName:"p"},"0.2.0"),"."),(0,i.kt)("h3",{id:"how-to-find-the-subroutine-version"},"How to find the subroutine version"),(0,i.kt)("p",null,"The easiest way to find the correct subroutine version is to view the MVOM source on GitHub. Each version of MVOM is tagged on GitHub, so you can use the GitHub navigation to switch to your appropriate version. For example, the link to the latest version is located at ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/STORIS/mvom/blob/main/src/manifest.json"},"https://github.com/STORIS/mvom/blob/main/src/manifest.json"),"."),(0,i.kt)("p",null,"In the repo's ",(0,i.kt)("inlineCode",{parentName:"p"},"src")," folder, there exists a file named ",(0,i.kt)("inlineCode",{parentName:"p"},"manifest.json"),". This file contains a list of key/value pairing for the MVOM feature and its MultiValue BASIC version. Given this file structure:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "dependencies": {\n    "deleteById": "^3.0.0",\n    "deploy": "^1.0.0",\n    "entry": "^0.2.0",\n    "find": "^4.0.0",\n    "findById": "^4.0.0",\n    "findByIds": "^4.0.0",\n    "readFileContentsById": "^1.0.0",\n    "getServerInfo": "^1.2.0",\n    "save": "^3.0.0",\n    "setup": "^1.1.0",\n    "teardown": "^1.0.0"\n  }\n}\n')),(0,i.kt)("p",null,"The version for the ",(0,i.kt)("inlineCode",{parentName:"p"},"entry")," feature is ",(0,i.kt)("inlineCode",{parentName:"p"},"0.2.0"),". This ",(0,i.kt)("inlineCode",{parentName:"p"},"0.2.0")," should replace the ",(0,i.kt)("inlineCode",{parentName:"p"},"{{subroutine_version}}")," in the above format."),(0,i.kt)("h2",{id:"deploying-the-rest-server-subroutine-code"},"Deploying the REST Server Subroutine Code"),(0,i.kt)("p",null,"The easiest way to deploy the MVOM BASIC source is to use MVIS Admin to deploy it. You can deploy BASIC source through the ",(0,i.kt)("inlineCode",{parentName:"p"},"Optional Code")," tab of the REST Server Subroutine definition."),(0,i.kt)("figure",null,(0,i.kt)("p",null,(0,i.kt)("img",{alt:"MVIS Subroutine Source",src:t(7024).Z,width:"898",height:"800"})),(0,i.kt)("figcaption",{class:"figcaption-docs"},"Figure 2: Subroutine Source")),(0,i.kt)("p",null,"The following needs to be set:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Source Directory")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This can really be anything you want, but we recommend naming the directory ",(0,i.kt)("inlineCode",{parentName:"li"},"mvom.bp"),' to ensure your MVOM source code is separate from any other code. Assuming that directory does not exist, you should check the "Create source directory if it doesn\'t exist" option.'))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Check the ",(0,i.kt)("strong",{parentName:"p"},"Allow to compile and catalog subroutine code")," box")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Compile Options")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The BASIC source requires the case insensitive compilation flag (",(0,i.kt)("inlineCode",{parentName:"li"},"-i"),"). MVOM recommends compiling with the cross-reference flag (",(0,i.kt)("inlineCode",{parentName:"li"},"-d"),") and the overwrite flag (",(0,i.kt)("inlineCode",{parentName:"li"},"-o"),") as well. The full recommendation is to set the compile options to ",(0,i.kt)("inlineCode",{parentName:"li"},"-i -d -o"),"."))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Source Code")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"The MVOM distributable downloaded from ",(0,i.kt)("a",{parentName:"li",href:"https://www.npmjs.com/"},"npm")," includes the BASIC source code. To ensure you get the proper version of the code, we suggest opening the file from ",(0,i.kt)("inlineCode",{parentName:"li"},"node_modules/mvom/unibasic/entry.mvb")," and copying and pasting the contents of that file into the source code text area.")),(0,i.kt)("p",{parentName:"li"},"For MVOM release ",(0,i.kt)("inlineCode",{parentName:"p"},"2.0.0-alpha.6"),", the source code is:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$basictype 'U'\nsubroutine mvom_entry(inputSerialized, outputSerialized)\n* UDO Status codes:\nequ UDO_SUCCESS to 0\nequ UDO_ERROR to -1\nequ UDO_INVALIDHANDLE to -2\n\n* UDO value types:\nequ UDO_FALSE to 0\nequ UDO_TRUE to 1\nequ UDO_NULL to 2\nequ UDO_NUMBER to 3\nequ UDO_STRING to 4\nequ UDO_ARRAY to 5\nequ UDO_OBJECT to 6\n\n* UDO Error codes:\nequ UDOERROR_OUTOFMEMORY to 1\nequ UDOERROR_INVALIDJSON to 2\nequ UDOERROR_NOTSTANDALONE to 3\nequ UDOERROR_NOTFOUND to 4\nequ UDOERROR_INVALIDNAME to 5\nequ UDOERROR_NOTANOBJECT to 6\nequ UDOERROR_NOTANARRAY to 7\nequ UDOERROR_INVALIDINDEX to 8\nequ UDOERROR_OUTOFBOUND to 9\nequ UDOERROR_INVALIDOPTION to 10\nequ UDOERROR_INVALIDOPTIONVALUE to 11\nequ UDOERROR_OPTIONNOTSET to 12\nequ UDOERROR_INVALIDFORMAT to 13\nequ UDOERROR_INVALIDVALUE to 14\nequ UDOERROR_INVALIDTYPE to 15\nequ UDOERROR_REFERENCECYCLE to 16\nequ UDOERROR_INVALIDXML to 17\nequ UDOERROR_DOMAPIFAILURE to 18\n\n* UDO flags:\nequ UDOFORMAT_JSON to 0\nequ UDOFORMAT_XML to 1\n\n* UDO options:\nequ UDOOPTION_UDO2XML_XMLSTYLE to 0\nequ UDOOPTION_UDO2XML_NAMESPACE to 1\nequ UDOOPTION_OUTPUTMODE to 2\nequ UDOOPTION_XML2UDO_INFERNUMBER to 3\nequ UDOOPTION_XML2UDO_INFERBOOLEAN to 4\nequ UDOOPTION_XML2UDO_INFERNULL to 5\nequ UDOOPTION_XML2UDO_EMPTY2NULL to 6\nequ UDOOPTION_XML2UDO_TRIMWHITESPACE to 7\nequ UDOOPTION_XML2UDO_CASEINSENSITIVE to 8\nequ UDOOPTION_XML2UDO_KEEPROOT to 9\nequ UDOOPTION_UDO2XML_ROOTNAME to 10\nequ UDOOPTION_UDO2XML_NULL2EMPTY to 11\nequ UDOOPTION_UDO2XML_NAMESPACEPREFIX to 12\n\n* UDO option values:\nequ UDO_XMLSTYLE_ATTR to \"ATTRIBUTE\"\nequ UDO_XMLSTYLE_ELEM to \"ELEMENT\"\nequ UDO_OUTPUT_COMPACT  to \"COMPACT\"\nequ UDO_OUTPUT_FORMATTED  to \"FORMATTED\"\nequ UDO_OPTION_ON to \"ON\"\nequ UDO_OPTION_OFF to \"OFF\"\n\n* error constants:\nequ ERROR_MALFORMED_INPUT to 1\nequ ERROR_UNSUPPORTED_ACTION to 2\nequ ERROR_DEPLOYMENT to 3\nequ ERROR_UDO to 4\nequ ERROR_FILE_OPEN to 5\nequ ERROR_FILE_CREATE to 6\nequ ERROR_RECORD_READ to 7\nequ ERROR_RECORD_WRITE to 8\nequ ERROR_RECORD_DELETE to 9\nequ ERROR_RECORD_VERSION to 10\nequ ERROR_RECORD_LOCKED to 11\nequ ERROR_QUERY to 12\nequ ERROR_DIGEST_HASH to 13\nequ ERROR_FOREIGN_KEY to 14\nequ ERROR_ENCODE_FILE to 15\n\n* eliminate all terminal output\nhush on\n\n* ensure a clean slate\nclearselect all\nclearsql\n\n* create output object\nif udoCreate(UDO_OBJECT, output) then\n  * in the event of an error in the creation of the output object, there is little we can do except fatally abort\n  return; * returning to caller\nend\n\n* create input object\nif udoRead(inputSerialized, UDOFORMAT_JSON, input) then\n  call error_handler(ERROR_MALFORMED_INPUT, output)\n  go response\nend\n\n* ensure compact serialized json\nif udoSetOption(UDOOPTION_OUTPUTMODE, UDO_OUTPUT_COMPACT) then\n  call error_handler(ERROR_UDO, output)\n  go response\nend\n\n* start main program processing\n\nif udoGetProperty(input, 'action', action, type) then\n  call error_handler(ERROR_MALFORMED_INPUT, output)\n  go response\nend\n\nbegin case\n  case action eq 'featureList'\n    * return the name of all globally cataloged programs that appear to be mvom features\n    if udoCreate(UDO_ARRAY, featureList) then\n      call error_handler(ERROR_UDO, output)\n      go response\n    end\n\n    if udoSetProperty(output, 'features', featureList) then\n      call error_handler(ERROR_UDO, output)\n      go response\n    end\n\n    udtexecute 'select CTLGTB with @ID like \"mvom...\"' returning errmsg\n    if @system.return.code lt 0 then\n      call error_handler(ERROR_QUERY, output)\n      go response\n    end\n    loop readnext catalogKey else exit\n      if udoArrayAppendItem(featureList, catalogKey) then\n        call error_handler(ERROR_UDO, output)\n        go response\n      end\n    repeat\n  case action eq 'createDir'\n    * create a directory (if necessary)\n    if udoGetProperty(input, 'dirName', dirName, type) then\n      call error_handler(ERROR_MALFORMED_INPUT, output)\n      go response\n    end\n\n    open dirName to f.dirName on error\n      call error_handler(ERROR_FILE_OPEN, output)\n      go response\n    end then\n      close f.dirName on error null\n    end else\n      udtexecute 'create.file dir ':dirName returning errmsg\n      if @system.return.code lt 0 then\n        call error_handler(ERROR_FILE_CREATE, output)\n        go response\n      end\n    end\n  case action eq 'deploy'\n    * deploy source code\n    if udoGetProperty(input, 'sourceDir', sourceDir, type) then\n      call error_handler(ERROR_MALFORMED_INPUT, output)\n      go response\n    end\n\n    if udoGetProperty(input, 'source', source, type) then\n      call error_handler(ERROR_MALFORMED_INPUT, output)\n      go response\n    end\n\n    if udoGetProperty(input, 'programName', programName, type) then\n      call error_handler(ERROR_MALFORMED_INPUT, output)\n      go response\n    end\n\n    open sourceDir to f.sourceDir on error\n      call error_handler(ERROR_FILE_OPEN, output)\n      go response\n    end else\n      call error_handler(ERROR_FILE_OPEN, output)\n      go response\n    end\n\n    write source on f.sourceDir, programName on error\n      close f.sourceDir on error null\n      call error_handler(ERROR_RECORD_WRITE, output)\n      go response\n    end\n\n    close f.sourceDir on error null\n\n    * compiling with override and case-insensitive flags\n    udtexecute 'basic ':sourceDir:' ':programName:' -d -o -i' returning errmsg\n    if @system.return.code then\n      call error_handler(ERROR_DEPLOYMENT, output)\n      go response\n    end\n\n    * cataloging with default catalog (global) with force override\n    udtexecute 'catalog ':sourceDir:' ':programName:' force' returning errmsg\n    if @system.return.code then\n      call error_handler(ERROR_DEPLOYMENT, output)\n      go response\n    end\n\n    if udoSetProperty(output, 'deployed', programName) then\n      call error_handler(ERROR_UDO, output)\n      go response\n    end\n  case action eq 'subroutine'\n    * call specified subroutine\n    if udoGetProperty(input, 'subroutineId', subroutineId, type) then\n      call error_handler(ERROR_MALFORMED_INPUT, output)\n      go response\n    end\n\n    if udoGetProperty(input, 'options', options, type) then\n      call error_handler(ERROR_MALFORMED_INPUT, output)\n      go response\n    end\n\n    if udoGetProperty(input, 'setupId', setupId, type) then\n      call error_handler(ERROR_MALFORMED_INPUT, output)\n      go response\n    end\n\n    if udoGetProperty(input, 'setupOptions', setupOptions, type) then\n      call error_handler(ERROR_MALFORMED_INPUT, output)\n      go response\n    end\n\n    if udoGetProperty(input, 'teardownId', teardownId, type) then\n      call error_handler(ERROR_MALFORMED_INPUT, output)\n      go response\n    end\n\n    if udoGetProperty(input, 'teardownOptions', teardownOptions, type) then\n      call error_handler(ERROR_MALFORMED_INPUT, output)\n      go response\n    end\n\n    call @setupId(setupOptions)\n\n    call @subroutineId(options, output)\n\n    call @teardownId(teardownOptions)\n  case 1\n    call error_handler(ERROR_UNSUPPORTED_ACTION, output)\n    go response\nend case\n\nresponse:\n  * if an error occurs in serializing the output object it will likely result in a fatal error\n  * there is little else we can do here except let that fatal error occur\n  x = udoWrite(output, UDOFORMAT_JSON, outputSerialized)\n\n  * if an error occurs in freeing the memory space for the objects, we will ignore it as there is little else that can be done\n  x = udoFree(output)\n  x = udoFree(input)\n\n  return; * returning to caller\n\nsubroutine error_handler(errorCode, output)\n\n* note that this routine intentionally does not react to udo errors because it could\n* potentially result in an unending sequence of errors\n\nx = udoSetProperty(output, 'errorCode', errorCode)\n\nreturn\n")),(0,i.kt)("p",null,'Upon clicking "OK", MVIS Admin will allow for the source code to be deployed.'))}O.isMDXComponent=!0},709:function(e,n,t){n.Z=t.p+"assets/images/subroutine-definition-9cbb34289ca28f0cfb445a23404d6910.png"},7024:function(e,n,t){n.Z=t.p+"assets/images/subroutine-source-7212ec56a02a6c47cf92305c490070d3.png"}}]);