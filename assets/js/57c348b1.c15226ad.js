"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1582],{8953:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>l,frontMatter:()=>a,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"Schema/schema_basics","title":"Schema Basics","description":"The Schema class allows you to define your data definition for your MultiValue files. This definition is used to transform MultiValue data between the database and a JavaScript object. Additionally, it allows you to define data validation requirements to aid in ensuring data validity upon writing to the database.","source":"@site/docs/03 - Schema/01 - Basics.md","sourceDirName":"03 - Schema","slug":"/Schema/schema_basics","permalink":"/mvom/docs/Schema/schema_basics","draft":false,"unlisted":false,"editUrl":"https://github.com/STORIS/mvom/tree/main/website/docs/03 - Schema/01 - Basics.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"schema_basics","title":"Schema Basics"},"sidebar":"docsSidebar","previous":{"title":"Connection","permalink":"/mvom/docs/connection"},"next":{"title":"String","permalink":"/mvom/docs/Schema/Scalar Schema Types/schema_type_string"}}');var r=i(4848),s=i(8453);const a={id:"schema_basics",title:"Schema Basics"},d="Schema Basics",c={},o=[{value:"Creating a schema",id:"creating-a-schema",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Schema Definition",id:"schema-definition",level:2},{value:"Properties common to all schema definition types",id:"properties-common-to-all-schema-definition-types",level:3},{value:"Mandatory properties",id:"mandatory-properties",level:3},{value:"Type property",id:"type-property",level:4},{value:"Path property",id:"path-property",level:4},{value:"Attribute based paths",id:"attribute-based-paths",level:5},{value:"Value based paths",id:"value-based-paths",level:5},{value:"Subvalue based paths",id:"subvalue-based-paths",level:5},{value:"Optional Properties",id:"optional-properties",level:3},{value:"Dictionary property",id:"dictionary-property",level:4},{value:"Required property",id:"required-property",level:4},{value:"Encrypted",id:"encrypted",level:4},{value:"Example",id:"example",level:3}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"schema-basics",children:"Schema Basics"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"Schema"})," class allows you to define your data definition for your MultiValue files. This definition is used to transform MultiValue data between the database and a JavaScript object. Additionally, it allows you to define data validation requirements to aid in ensuring data validity upon writing to the database."]}),"\n",(0,r.jsx)(t.h2,{id:"creating-a-schema",children:"Creating a schema"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"Schema"})," class is exported from MVOM as a named export. To create a schema object, you should use the ",(0,r.jsx)(t.code,{children:"new"})," operator."]}),"\n",(0,r.jsx)(t.h3,{id:"syntax",children:"Syntax"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"constructor(definition: SchemaDefinition, options?: SchemaConstructorOptions): Schema\n"})}),"\n",(0,r.jsx)(t.h3,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Parameter"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"definition"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"object"})}),(0,r.jsxs)(t.td,{children:["The ",(0,r.jsx)(t.a,{href:"#schema-definition",children:"definition"})," for the schema"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"options"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"object"})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.a,{href:"./schema_options",children:"Options object"})," (see link)"]})]})]})]}),"\n",(0,r.jsx)(t.h2,{id:"schema-definition",children:"Schema Definition"}),"\n",(0,r.jsx)(t.p,{children:"The schema definition is an object which describes the layout of the JavaScript object structure, how it will be accessed from a MultiValue file, and what validations will be performed when writing to a MultiValue record. You can define your own property names and give each property a mapping to a particular location in the file. Depending on what type of data is being mapped there will be different options available in the schema definition."}),"\n",(0,r.jsx)(t.h3,{id:"properties-common-to-all-schema-definition-types",children:"Properties common to all schema definition types"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Property"}),(0,r.jsx)(t.th,{style:{textAlign:"center"},children:"Type"}),(0,r.jsx)(t.th,{style:{textAlign:"center"},children:"Mandatory"}),(0,r.jsx)(t.th,{children:"Default"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"type"})}),(0,r.jsxs)(t.td,{style:{textAlign:"center"},children:[(0,r.jsx)(t.code,{children:'"string"'}),(0,r.jsx)("br",{}),(0,r.jsx)(t.code,{children:'"number"'}),(0,r.jsx)("br",{}),(0,r.jsx)(t.code,{children:'"boolean"'}),(0,r.jsx)("br",{}),(0,r.jsx)(t.code,{children:'"ISOCalendarDate"'}),(0,r.jsx)("br",{}),(0,r.jsx)(t.code,{children:'"ISOTime"'}),(0,r.jsx)("br",{}),(0,r.jsx)(t.code,{children:'"ISOCalendarDateTime"'})]}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"\u2714\ufe0f"}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"A string identifying the data type of the value represented by this definition"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"path"})}),(0,r.jsxs)(t.td,{style:{textAlign:"center"},children:[(0,r.jsx)(t.code,{children:"string"})," | ",(0,r.jsx)(t.code,{children:"number"})]}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:"\u2714\ufe0f"}),(0,r.jsx)(t.td,{}),(0,r.jsxs)(t.td,{children:["The ",(0,r.jsx)(t.a,{href:"#path-property",children:"path"})," to the location of the data"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"dictionary"})}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:(0,r.jsx)(t.code,{children:"string"})}),(0,r.jsx)(t.td,{style:{textAlign:"center"}}),(0,r.jsx)(t.td,{}),(0,r.jsx)(t.td,{children:"The dictionary name to use for query conditionals for this property"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"required"})}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:(0,r.jsx)(t.code,{children:"boolean"})}),(0,r.jsx)(t.td,{style:{textAlign:"center"}}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"false"})}),(0,r.jsx)(t.td,{children:"Indicate whether this property is mandatory"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"encrypted"})}),(0,r.jsx)(t.td,{style:{textAlign:"center"},children:(0,r.jsx)(t.code,{children:"boolean"})}),(0,r.jsx)(t.td,{style:{textAlign:"center"}}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"false"})}),(0,r.jsx)(t.td,{children:"Indicate whether this property should be encrypted"})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"mandatory-properties",children:"Mandatory properties"}),"\n",(0,r.jsxs)(t.p,{children:["All mapped properties in a schema definition require two properties regardless of what type of data they are mapping. These properties are the ",(0,r.jsx)(t.code,{children:"type"})," and ",(0,r.jsx)(t.code,{children:"path"})," properties. The ",(0,r.jsx)(t.code,{children:"type"})," property defines the data type of the data being mapped and the ",(0,r.jsx)(t.code,{children:"path"})," property defines the location of the data in the file."]}),"\n",(0,r.jsx)(t.h4,{id:"type-property",children:"Type property"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"type"})," property can be any of the supported schema types: ",(0,r.jsx)(t.code,{children:"string"}),", ",(0,r.jsx)(t.code,{children:"number"}),", ",(0,r.jsx)(t.code,{children:"boolean"}),", ",(0,r.jsx)(t.code,{children:"ISOCalendarDate"}),", ",(0,r.jsx)(t.code,{children:"ISOTime"}),", or ",(0,r.jsx)(t.code,{children:"ISOCalendarDateTime"}),"."]}),"\n",(0,r.jsx)(t.h4,{id:"path-property",children:"Path property"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"path"})," property can be either a string or a number and it defines the location of the data in the MultiValue file. Data can be located at a specified attribute, attribute + value, or attribute + value + subvalue."]}),"\n",(0,r.jsx)(t.h5,{id:"attribute-based-paths",children:"Attribute based paths"}),"\n",(0,r.jsxs)(t.p,{children:["For data located in an attribute, the ",(0,r.jsx)(t.code,{children:"path"})," can either be an integer number or a integer number like string. This value represents the 1-indexed position of the data in the file. For instance, if the data is located in the third attribute of a file, the ",(0,r.jsx)(t.code,{children:"path"})," can either be ",(0,r.jsx)(t.code,{children:"3"})," or ",(0,r.jsx)(t.code,{children:'"3"'}),"."]}),"\n",(0,r.jsx)(t.h5,{id:"value-based-paths",children:"Value based paths"}),"\n",(0,r.jsxs)(t.p,{children:["For data located in a specific value of an attribute, the ",(0,r.jsx)(t.code,{children:"path"})," will be a dot-delimited string of integers with two parts. That is, the format of the string will be ",(0,r.jsx)(t.code,{children:'"n.n"'})," where ",(0,r.jsx)(t.code,{children:"n"})," represents an integer. For instance, if the data is located in the second value of the third attribute of a file, the ",(0,r.jsx)(t.code,{children:"path"})," would be defined as ",(0,r.jsx)(t.code,{children:'"3.2"'}),"."]}),"\n",(0,r.jsx)(t.h5,{id:"subvalue-based-paths",children:"Subvalue based paths"}),"\n",(0,r.jsxs)(t.p,{children:["For data located in a specific subvalue of a value of an attribute, the ",(0,r.jsx)(t.code,{children:"path"})," will be a dot-delimited string of integers with three parts. That is, the format of the string will be ",(0,r.jsx)(t.code,{children:'"n.n.n"'})," where ",(0,r.jsx)(t.code,{children:"n"})," represents an integer value. For instance, If the data is locatated in the first subvalue of the second value of the third attribute of a file, the ",(0,r.jsx)(t.code,{children:"path"})," would be defined as ",(0,r.jsx)(t.code,{children:'"3.2.1"'}),"."]}),"\n",(0,r.jsx)(t.admonition,{type:"warning",children:(0,r.jsx)(t.p,{children:"It's very likely that if you have data defined using subvalue based paths that there is either a better way to describe that data in MVOM or you might be employing a schema anti-pattern. Although this mechanism is supported by MVOM, it may be best to evaluate if there is another way to describe your schema or consider refactoring your physical database structures."})}),"\n",(0,r.jsx)(t.h3,{id:"optional-properties",children:"Optional Properties"}),"\n",(0,r.jsx)(t.h4,{id:"dictionary-property",children:"Dictionary property"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"dictionary"})," property indicates the MultiValue dictionary that is associated with the data indicated in the definition. It is used for the purposes of query execution. The ",(0,r.jsx)(t.code,{children:"dictionary"})," property is necessary if you wish to use the property for conditionals in a query, but is otherwise optional."]}),"\n",(0,r.jsx)(t.h4,{id:"required-property",children:"Required property"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"required"})," property indicates that a value must be present when saving. If the value is ",(0,r.jsx)(t.code,{children:"null"}),", ",(0,r.jsx)(t.code,{children:"undefined"}),", or empty string (string types only) then an error will be thrown when saving."]}),"\n",(0,r.jsx)(t.h4,{id:"encrypted",children:"Encrypted"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"encrypted"})," property indicates that a value should be encrypted on save and decrypted on access. See the ",(0,r.jsx)(t.a,{href:"./schema_encryption",children:"encryption"})," topic for more information."]}),"\n",(0,r.jsx)(t.h3,{id:"example",children:"Example"}),"\n",(0,r.jsx)(t.p,{children:"The below is a relatively trivial example of mapping a simple file structure in MVOM. Suppose you had a file shaped like:"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Attribute Number"}),(0,r.jsx)(t.th,{children:"Data type"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"1"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"string"})}),(0,r.jsx)(t.td,{children:"Customer ID"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"2"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"integer"})}),(0,r.jsx)(t.td,{children:"Open receivables balance"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"3"}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"date"})}),(0,r.jsx)(t.td,{children:"Last activity date (internal MultiValue format)"})]})]})]}),"\n",(0,r.jsx)(t.p,{children:"A schema definition for this structure might look like:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:"const schemaDefinition = {\n  customerId: { type: 'string', path: 1 },\n  openBalance: { type: 'number', path: 2 },\n  lastActivityDate: { type: 'ISOCalendarDate', path: 3 },\n};\n\nconst schema = new Schema(schemaDefinition);\n"})}),"\n",(0,r.jsx)(t.p,{children:"More detailed examples will follow later in the discussion of the various schema types."})]})}function l(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>a,x:()=>d});var n=i(6540);const r={},s=n.createContext(r);function a(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);