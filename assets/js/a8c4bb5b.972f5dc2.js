"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[801],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),m=p(n),u=r,f=m["".concat(l,".").concat(u)]||m[u]||c[u]||o;return n?a.createElement(f,i(i({ref:t},s),{},{components:n})):a.createElement(f,i({ref:t},s))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var d={};for(var l in t)hasOwnProperty.call(t,l)&&(d[l]=t[l]);d.originalType=e,d.mdxType="string"==typeof e?e:r,i[1]=d;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9367:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return d},metadata:function(){return p},toc:function(){return c}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],d={id:"model_reading_encoded",title:"Reading Encoded Data"},l="Reading Encoded Data",p={unversionedId:"Model/Advanced Topics/model_reading_encoded",id:"Model/Advanced Topics/model_reading_encoded",title:"Reading Encoded Data",description:"MVOM allows for the reading of data from a DIR-type file as a base-64 encoded string. The static readFileContentsById method of the Model class can be used for this functionality.",source:"@site/docs/04 - Model/07 - Advanced Topics/04 - Reading Encoded Data.md",sourceDirName:"04 - Model/07 - Advanced Topics",slug:"/Model/Advanced Topics/model_reading_encoded",permalink:"/mvom/docs/Model/Advanced Topics/model_reading_encoded",draft:!1,editUrl:"https://github.com/STORIS/mvom/tree/main/website/docs/04 - Model/07 - Advanced Topics/04 - Reading Encoded Data.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"model_reading_encoded",title:"Reading Encoded Data"},sidebar:"docsSidebar",previous:{title:"Schemaless Models",permalink:"/mvom/docs/Model/Advanced Topics/model_schemaless"},next:{title:"Detecting MVOM in Triggers",permalink:"/mvom/docs/Model/Advanced Topics/model_detecting_mvom"}},s={},c=[{value:"readFileContentsById",id:"readfilecontentsbyid",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Options Object Properties",id:"options-object-properties",level:4},{value:"Example",id:"example",level:3},{value:"How It Works",id:"how-it-works",level:3}],m={toc:c};function u(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"reading-encoded-data"},"Reading Encoded Data"),(0,o.kt)("p",null,"MVOM allows for the reading of data from a DIR-type file as a base-64 encoded string. The static ",(0,o.kt)("inlineCode",{parentName:"p"},"readFileContentsById")," method of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Model")," class can be used for this functionality."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"The file name used to create the ",(0,o.kt)("inlineCode",{parentName:"p"},"Model")," class must have a record in the VOC file pointing to the location on disk where the directory resides.")),(0,o.kt)("h2",{id:"readfilecontentsbyid"},"readFileContentsById"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"readFileContentsById")," method allows for reading a file from a directory and returning a Base-64 Encoded representation of the file's contents."),(0,o.kt)("h3",{id:"syntax"},"Syntax"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"static readFileContentsById(id: string, options?: ModelReadFileContentsByIdOptions): Promise<string>\n")),(0,o.kt)("h3",{id:"parameters"},"Parameters"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"id")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"string")),(0,o.kt)("td",{parentName:"tr",align:null},"The record ID of the record to read")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"options")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"object")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#options-object-properties"},"Options object")," (see below)")))),(0,o.kt)("h4",{id:"options-object-properties"},"Options Object Properties"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Property"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"maxReturnPayloadSize")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"number")),(0,o.kt)("td",{parentName:"tr",align:null},"The maximum allowed return payload size in bytes. If this size is exceeded a DbServerError will be thrown. If omitted the value specified during connection creation is used.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"requestId")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"string")),(0,o.kt)("td",{parentName:"tr",align:null},"A request/trace ID to be passed to MVIS as a request header with the key ",(0,o.kt)("inlineCode",{parentName:"td"},"X-MVIS-Trace-Id"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"userDefined")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"object")),(0,o.kt)("td",{parentName:"tr",align:null},"The ",(0,o.kt)("a",{parentName:"td",href:"model_user_defined_options"},"user defined options")," to pass to the database subroutines")))),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const Encoded = connection.model(null, 'SOME_DIRECTORY');\n\nconst encoded = await Encoded.readFileContentsById('SOME_FILE');\n")),(0,o.kt)("h3",{id:"how-it-works"},"How It Works"),(0,o.kt)("p",null,"The general workflow of this method is as follows:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Read the ",(0,o.kt)("inlineCode",{parentName:"li"},"VOC")," record for the file which was used to create the ",(0,o.kt)("inlineCode",{parentName:"li"},"Model")),(0,o.kt)("li",{parentName:"ol"},"Take the path to the file from attribute 2 of the ",(0,o.kt)("inlineCode",{parentName:"li"},"VOC")," record"),(0,o.kt)("li",{parentName:"ol"},"Append a ",(0,o.kt)("inlineCode",{parentName:"li"},"/")," and the id specified to the path"),(0,o.kt)("li",{parentName:"ol"},"Read and encode the contents of the file by passing the full path to the MultiValue Basic ",(0,o.kt)("inlineCode",{parentName:"li"},"encode")," function.")))}u.isMDXComponent=!0}}]);