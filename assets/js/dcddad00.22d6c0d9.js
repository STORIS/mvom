"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[397],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=d(n),m=o,y=u["".concat(s,".").concat(m)]||u[m]||l[m]||i;return n?r.createElement(y,a(a({ref:t},p),{},{components:n})):r.createElement(y,a({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var d=2;d<i;d++)a[d]=n[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8927:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return c},metadata:function(){return d},toc:function(){return l}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],c={id:"model_query_sorting",title:"Sorting"},s="Sorting",d={unversionedId:"Model/Querying/model_query_sorting",id:"Model/Querying/model_query_sorting",title:"Sorting",description:"Query results can be sorted by using the sort property of the query options. sort accepts an array of a 2-tuple. The first index of the tuple is the property name associated with a dictionary that you wish to sort on and the second index of the tuple is either 1 to indicate ascending sort or -1 to indicate descending sort. Sort criteria will be added in the order in which they appear in the array, so this mechanism can be used in order to prioritize sort behavior.",source:"@site/docs/04 - Model/06 - Querying/05 - Sorting.md",sourceDirName:"04 - Model/06 - Querying",slug:"/Model/Querying/model_query_sorting",permalink:"/mvom/docs/Model/Querying/model_query_sorting",draft:!1,editUrl:"https://github.com/STORIS/mvom/tree/main/website/docs/04 - Model/06 - Querying/05 - Sorting.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"model_query_sorting",title:"Sorting"},sidebar:"docsSidebar",previous:{title:"Pagination",permalink:"/mvom/docs/Model/Querying/model_query_pagination"},next:{title:"The __v Property",permalink:"/mvom/docs/Model/Advanced Topics/model_version"}},p={},l=[{value:"Example",id:"example",level:2}],u={toc:l};function m(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"sorting"},"Sorting"),(0,i.kt)("p",null,"Query results can be sorted by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"sort")," property of the ",(0,i.kt)("a",{parentName:"p",href:"model_query_basics#options-object-properties"},"query options"),". ",(0,i.kt)("inlineCode",{parentName:"p"},"sort")," accepts an array of a 2-tuple. The first index of the tuple is the property name associated with a dictionary that you wish to sort on and the second index of the tuple is either ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," to indicate ascending sort or ",(0,i.kt)("inlineCode",{parentName:"p"},"-1")," to indicate descending sort. Sort criteria will be added in the order in which they appear in the array, so this mechanism can be used in order to prioritize sort behavior."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"The following query will sort by descending price as the primary sort condition and by ascending description as the secondary sort condition."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const schema = new Schema({\n  description: { type: 'string', path: 1, dictionary: 'DESCRIPTION' },\n  price: { type: 'number', path: 2, dbDecimals: 2, dictionary: 'PRICE' },\n});\n\nconst Item = connection.model(schema, 'ITEM');\n\nconst items = await Item.find(\n  {},\n  {\n    sort: [\n      ['price', -1],\n      ['description', 1],\n    ],\n  },\n);\n")),(0,i.kt)("p",null,"The query which will be executed on the MultiValue database is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"select ITEM by.dsnd PRICE by DESCRIPTION\n")))}m.isMDXComponent=!0}}]);