"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[136],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return p}});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),m=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=m(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=m(a),p=n,f=d["".concat(s,".").concat(p)]||d[p]||c[p]||l;return a?r.createElement(f,i(i({ref:t},u),{},{components:a})):r.createElement(f,i({ref:t},u))}));function p(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:n,i[1]=o;for(var m=2;m<l;m++)i[m]=a[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},2865:function(e,t,a){a.r(t),a.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return o},metadata:function(){return m},toc:function(){return c}});var r=a(7462),n=a(3366),l=(a(7294),a(3905)),i=["components"],o={id:"schema_scalar_arrays",title:"Scalar Arrays"},s="Scalar Arrays",m={unversionedId:"Schema/schema_scalar_arrays",id:"Schema/schema_scalar_arrays",title:"Scalar Arrays",description:"MVOM allows schema definitions that define arrays of any scalar schema types. In the MultiValue database, these would typically be stored as a multivalued or multi-subvalued attribute.",source:"@site/docs/03 - Schema/04 - Scalar Arrays.md",sourceDirName:"03 - Schema",slug:"/Schema/schema_scalar_arrays",permalink:"/mvom/docs/Schema/schema_scalar_arrays",draft:!1,editUrl:"https://github.com/STORIS/mvom/tree/main/website/docs/03 - Schema/04 - Scalar Arrays.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"schema_scalar_arrays",title:"Scalar Arrays"},sidebar:"docsSidebar",previous:{title:"Schema Options",permalink:"/mvom/docs/Schema/schema_options"},next:{title:"Embedded Objects",permalink:"/mvom/docs/Schema/schema_embedded_objects"}},u={},c=[{value:"Arrays from Multivalued Attributes",id:"arrays-from-multivalued-attributes",level:2},{value:"Formatting",id:"formatting",level:3},{value:"Example",id:"example",level:3},{value:"Arrays from Multi-Subvalued Attributes",id:"arrays-from-multi-subvalued-attributes",level:2},{value:"Formatting",id:"formatting-1",level:3},{value:"Example",id:"example-1",level:3},{value:"Arrays from Multi-Subvalued Values",id:"arrays-from-multi-subvalued-values",level:2},{value:"Formatting",id:"formatting-2",level:3},{value:"Example",id:"example-2",level:3}],d={toc:c};function p(e){var t=e.components,a=(0,n.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"scalar-arrays"},"Scalar Arrays"),(0,l.kt)("p",null,"MVOM allows schema definitions that define arrays of any scalar schema types. In the MultiValue database, these would typically be stored as a multivalued or multi-subvalued attribute."),(0,l.kt)("h2",{id:"arrays-from-multivalued-attributes"},"Arrays from Multivalued Attributes"),(0,l.kt)("p",null,"To create a schema definition for a multivalued attribute, you simply wrap the schema type definition in ",(0,l.kt)("inlineCode",{parentName:"p"},"[]")," to denote it as an array."),(0,l.kt)("h3",{id:"formatting"},"Formatting"),(0,l.kt)("p",null,"A scalar array type will honor all the transformation and validation rules of the schema type that defines the array's contents. For instance, a schema type definition for an array of strings would format as follows (",(0,l.kt)("inlineCode",{parentName:"p"},"{vm}")," denotes value mark delimiter):"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Database Value"),(0,l.kt)("th",{parentName:"tr",align:null},"JavaScript Value"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"foo{vm}bar{vm}baz")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'["foo", "bar", "baz"]'))))),(0,l.kt)("h3",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const schemaDefinition = {\n  stringArrayProperty: [\n    {\n      type: 'string',\n      path: 1,\n      dictionary: 'STRING_ARRAY_DICT',\n      required: true,\n    },\n  ],\n};\n\nconst schema = new Schema(schemaDefinition);\n")),(0,l.kt)("h2",{id:"arrays-from-multi-subvalued-attributes"},"Arrays from Multi-Subvalued Attributes"),(0,l.kt)("p",null,"To create a schema definition for a multi-subvalued attribute, you simply wrap the schema type definition in ",(0,l.kt)("inlineCode",{parentName:"p"},"[[]]")," to denote it as a multi dimensional array."),(0,l.kt)("h3",{id:"formatting-1"},"Formatting"),(0,l.kt)("p",null,"A scalar multi-dimensional array type will honor all the transformation and validation rules of the schema type that defines the array's contents. For instance, a schema type definition for a multi-dimensional array of strings would format as follows (",(0,l.kt)("inlineCode",{parentName:"p"},"{vm}")," denotes value mark delimiter and ",(0,l.kt)("inlineCode",{parentName:"p"},"{svm}")," denotes subvalue mark delimiter):"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Database Value"),(0,l.kt)("th",{parentName:"tr",align:null},"JavaScript Value"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"foo{svm}bar{vm}baz{svm}qux")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'[["foo", "bar"], ["baz", "qux]]'))))),(0,l.kt)("h3",{id:"example-1"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const schemaDefinition = {\n  stringMultiDimensionalArrayProperty: [\n    [\n      {\n        type: 'string',\n        path: 1,\n        dictionary: 'STRING_MD_ARRAY_DICT',\n        required: true,\n      },\n    ],\n  ],\n};\n\nconst schema = new Schema(schemaDefinition);\n")),(0,l.kt)("h2",{id:"arrays-from-multi-subvalued-values"},"Arrays from Multi-Subvalued Values"),(0,l.kt)("p",null,"Occasionally, attributes will contain values that each denote a different data type or property. In these scenarios, its also possible that one of the values will contain a subvalue delimited list of items. MVOM will handle this as well."),(0,l.kt)("h3",{id:"formatting-2"},"Formatting"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"{vm}")," denotes value mark delimiter and ",(0,l.kt)("inlineCode",{parentName:"p"},"{svm}")," denotes subvalue mark delimiter:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Database Value"),(0,l.kt)("th",{parentName:"tr",align:null},"JavaScript Value"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"foo{svm}bar{vm}some other data")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'["foo", "bar"]'))))),(0,l.kt)("h3",{id:"example-2"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const schemaDefinition = {\n  stringArrayFromValueProperty: [\n    {\n      type: 'string',\n      path: '1.1',\n      dictionary: 'STRING_VAL_ARRAY_DICT',\n      required: true,\n    },\n  ],\n  otherDataProperty: {\n    type: 'string',\n    path: '1.2',\n    dictionary: 'OTHER_DATA_DICT',\n    required: true,\n  },\n};\n\nconst schema = new Schema(schemaDefinition);\n")))}p.isMDXComponent=!0}}]);