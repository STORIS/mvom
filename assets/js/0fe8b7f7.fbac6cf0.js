"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[561],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),u=r,g=m["".concat(s,".").concat(u)]||m[u]||d[u]||o;return n?a.createElement(g,i(i({ref:t},p),{},{components:n})):a.createElement(g,i({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6190:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return d}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],l={id:"connection",title:"Connection"},s="Connection",c={unversionedId:"connection",id:"connection",title:"Connection",description:"The first step to working with MVOM is to establish a connection to the database server via MVIS. Establishing a connection is facilitated via the Connection class which is exported from MVOM as a named export.",source:"@site/docs/02 - Connection.md",sourceDirName:".",slug:"/connection",permalink:"/mvom/docs/connection",draft:!1,editUrl:"https://github.com/STORIS/mvom/tree/main/website/docs/02 - Connection.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"connection",title:"Connection"},sidebar:"docsSidebar",previous:{title:"Setup and Configuration",permalink:"/mvom/docs/Introduction/setup_and_configuration"},next:{title:"Schema Basics",permalink:"/mvom/docs/Schema/schema_basics"}},p={},d=[{value:"Creating a connection",id:"creating-a-connection",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Options Object Properties",id:"options-object-properties",level:4},{value:"Example",id:"example",level:3},{value:"Opening a connection",id:"opening-a-connection",level:2},{value:"Syntax",id:"syntax-1",level:3},{value:"Example",id:"example-1",level:3},{value:"Deploying MVOM database server features",id:"deploying-mvom-database-server-features",level:2},{value:"Syntax",id:"syntax-2",level:3},{value:"Parameters",id:"parameters-1",level:3},{value:"Options Object Properties",id:"options-object-properties-1",level:4},{value:"Example",id:"example-2",level:3},{value:"Getting the current database date",id:"getting-the-current-database-date",level:2},{value:"Syntax",id:"syntax-3",level:3},{value:"Getting the current database time",id:"getting-the-current-database-time",level:2},{value:"Syntax",id:"syntax-4",level:3},{value:"Getting the current database date-time",id:"getting-the-current-database-date-time",level:2},{value:"Syntax",id:"syntax-5",level:3},{value:"Logger interface",id:"logger-interface",level:2},{value:"Example",id:"example-3",level:3}],m={toc:d};function u(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"connection"},"Connection"),(0,o.kt)("p",null,"The first step to working with MVOM is to establish a connection to the database server via MVIS. Establishing a connection is facilitated via the ",(0,o.kt)("inlineCode",{parentName:"p"},"Connection")," class which is exported from MVOM as a named export."),(0,o.kt)("h2",{id:"creating-a-connection"},"Creating a connection"),(0,o.kt)("p",null,"A connection to the database server is established using the ",(0,o.kt)("inlineCode",{parentName:"p"},"createConnection")," static factory method of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Connection")," class. Calling this method will return an instance of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Connection")," class."),(0,o.kt)("h3",{id:"syntax"},"Syntax"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"Connection.createConnection(mvisUri: string, account: string, options?: CreateConnectionOptions): Connection\n")),(0,o.kt)("h3",{id:"parameters"},"Parameters"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Example"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"mvisUri")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"string")),(0,o.kt)("td",{parentName:"tr",align:null},"The URI to the MVIS server instance"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"http://foo.bar.com"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"account")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"string")),(0,o.kt)("td",{parentName:"tr",align:null},"The account name as defined in MVIS configuration"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"demo"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"options")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"object")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#options-object-properties"},"Options object")," (see below)"),(0,o.kt)("td",{parentName:"tr",align:null})))),(0,o.kt)("h4",{id:"options-object-properties"},"Options Object Properties"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Property"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Default"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"logger")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"Logger")),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},"An object implementing the ",(0,o.kt)("a",{parentName:"td",href:"#logger-interface"},"Logger")," interface, used for logging messages emitted by MVOM")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"cacheMaxAge")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"number")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"3600")),(0,o.kt)("td",{parentName:"tr",align:null},"The maximum age of cached connection information, such as the current database date")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"timeout")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"number")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"0")),(0,o.kt)("td",{parentName:"tr",align:null},"The request timeout in milliseconds (0 to disable)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"httpAgent")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"http.Agent")),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},"An ",(0,o.kt)("inlineCode",{parentName:"td"},"http.Agent")," instance to use with http requests (recommended)")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"httpsAgent")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"https.Agent")),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},"An ",(0,o.kt)("inlineCode",{parentName:"td"},"https.Agent")," instance to use with https requests (recommended)")))),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Connection } from 'mvom';\n\nconst mvisUri = 'http://foo.bar.com';\nconst account = 'demo';\nconst options = { timeout: 30_000 };\n\nconst connection = Connection.createConnection(mvisUri, account, options);\n")),(0,o.kt)("h2",{id:"opening-a-connection"},"Opening a connection"),(0,o.kt)("p",null,"After a ",(0,o.kt)("inlineCode",{parentName:"p"},"Connection")," instance has been created, the connection must be opened before it can be used. The process of opening a connection will contact the MultiValue server and verify that the necessary database server subroutines have been installed. If they are available then the connection will be ready for use."),(0,o.kt)("h3",{id:"syntax-1"},"Syntax"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"open(): Promise<void>\n")),(0,o.kt)("h3",{id:"example-1"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Connection } from 'mvom';\n\nconst mvisUri = 'http://foo.bar.com';\nconst account = 'demo';\nconst options = { timeout: 30_000 };\n\nconst makeConnection = async (): Connection => {\n  const connection = Connection.createConnection(mvisUri, account, options);\n  await connection.open();\n  return connection;\n};\n\nexport default makeConnection;\n")),(0,o.kt)("h2",{id:"deploying-mvom-database-server-features"},"Deploying MVOM database server features"),(0,o.kt)("p",null,"MVOM requires a number of database server subroutines (referred to by MVOM as ",(0,o.kt)("em",{parentName:"p"},"server features"),") in order to perform its functionality on the database. If those subroutines are not available then a connection cannot be established. The connection instance allows for manually deploying those subroutines. The deployed subroutines will be cataloged globally for performance considerations. It is recommended to add handling for failed connections due to missing subroutines so that they are automatically deployed and the connection retried, but it is up to you when and how to deploy the subroutines. The ",(0,o.kt)("inlineCode",{parentName:"p"},"open")," method will throw an ",(0,o.kt)("inlineCode",{parentName:"p"},"InvalidServerFeaturesError")," if the subroutines are out of date and this error can be utilized as a trigger for deploying the subroutines."),(0,o.kt)("h3",{id:"syntax-2"},"Syntax"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"deployFeatures(sourceDir: string, options?: DeployFeaturesOptions)\n")),(0,o.kt)("h3",{id:"parameters-1"},"Parameters"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Example"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"sourceDir")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"string")),(0,o.kt)("td",{parentName:"tr",align:null},"The directory on the database server where the subroutines will be created"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"mvom.bp"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"options")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"object")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#options-object-properties-1"},"Options object")," (see below)"),(0,o.kt)("td",{parentName:"tr",align:null})))),(0,o.kt)("h4",{id:"options-object-properties-1"},"Options Object Properties"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Property"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Default"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"createDir")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"boolean")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"false")),(0,o.kt)("td",{parentName:"tr",align:null},"Create the directory prior to deploying if it is not present")))),(0,o.kt)("h3",{id:"example-2"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Connection, InvalidServerFeaturesError } from 'mvom';\n\nconst mvisUri = 'http://foo.bar.com';\nconst account = 'demo';\nconst options = { timeout: 30_000 };\nconst sourceDir = 'mvom.bp';\n\nconst makeConnection = async (): Connection => {\n  const connection = Connection.createConnection(mvisUri, account, options);\n  try {\n    await connection.open();\n  } catch (connectionErr) {\n    if (connectionErr instanceof InvalidServerFeaturesError) {\n      // server code is out-of-date - try updating the features\n      await connection.deployFeatures(sourceDir, { createDir: true });\n      await connection.open();\n    } else {\n      // something other than server code being out of date -- rethrow\n      throw connectionErr;\n    }\n  }\n  return connection;\n};\n\nexport default makeConnection;\n")),(0,o.kt)("h2",{id:"getting-the-current-database-date"},"Getting the current database date"),(0,o.kt)("p",null,"Using the connection instance, you can access the database server's current date in ISO 8601 date format (",(0,o.kt)("inlineCode",{parentName:"p"},"YYYY-MM-DD"),")."),(0,o.kt)("h3",{id:"syntax-3"},"Syntax"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"getDbDate(): Promise<string>\n")),(0,o.kt)("h2",{id:"getting-the-current-database-time"},"Getting the current database time"),(0,o.kt)("p",null,"Using the connection instance, you can access the database server's current time in ISO 8601 time format (",(0,o.kt)("inlineCode",{parentName:"p"},"HH:MM:SS.SSS"),")."),(0,o.kt)("h3",{id:"syntax-4"},"Syntax"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"getDbTime(): Promise<string>\n")),(0,o.kt)("h2",{id:"getting-the-current-database-date-time"},"Getting the current database date-time"),(0,o.kt)("p",null,"Using the connection instance, you can access the database server's current date-time in ISO 8601 date-time format (",(0,o.kt)("inlineCode",{parentName:"p"},"YYYY-MM-DDTHH:MM:SS.SSS"),")."),(0,o.kt)("h3",{id:"syntax-5"},"Syntax"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"getDbDateTime(): Promise<string>\n")),(0,o.kt)("h2",{id:"logger-interface"},"Logger interface"),(0,o.kt)("p",null,"MVOM allows passing a logger to the connection instance which will have one of its methods executed whenever MVOM logs a message for debugging or error purposes. The logger object has the following interface:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"interface Logger {\n  error(message: string): void;\n  warn(message: string): void;\n  info(message: string): void;\n  verbose(message: string): void;\n  debug(message: string): void;\n  silly(message: string): void;\n}\n")),(0,o.kt)("p",null,"Any object implementing the ",(0,o.kt)("inlineCode",{parentName:"p"},"Logger")," interface can be passed as an option when creating the connection. What you choose to do in your methods is totally up to you, but it can be helpful to provide a logger as it will make debugging and diagnosing any errors significantly easier."),(0,o.kt)("h3",{id:"example-3"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Connection } from 'mvom';\n\nconst logger = {\n  error: (message: string) => {\n    console.error(message);\n  },\n  warn: (message: string) => {\n    console.warn(message);\n  },\n  info: (message: string) => {\n    console.log(message);\n  },\n  verbose: (message: string) => {\n    console.log(message);\n  },\n  debug: (message: string) => {\n    console.log(message);\n  },\n  silly: (message: string) => {\n    console.log(message);\n  },\n};\n\nconst mvisUri = 'http://foo.bar.com';\nconst account = 'demo';\nconst options = { timeout: 30_000, logger };\n\nconst connection = Connection.createConnection(mvisUri, account, options);\n")))}u.isMDXComponent=!0}}]);