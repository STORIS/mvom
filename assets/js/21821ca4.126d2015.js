"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3001],{1966:(e,r,i)=>{i.r(r),i.d(r,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var t=i(4848),n=i(8453);const l={id:"model_query_operators",title:"Query Conditional Operators"},a="Query Conditional Operators",o={id:"Model/Querying/model_query_operators",title:"Query Conditional Operators",description:"MVOM supports a number of query operators to use for filtering the results of a query.",source:"@site/docs/04 - Model/06 - Querying/02 - Query Operators.md",sourceDirName:"04 - Model/06 - Querying",slug:"/Model/Querying/model_query_operators",permalink:"/mvom/docs/Model/Querying/model_query_operators",draft:!1,unlisted:!1,editUrl:"https://github.com/STORIS/mvom/tree/main/website/docs/04 - Model/06 - Querying/02 - Query Operators.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"model_query_operators",title:"Query Conditional Operators"},sidebar:"docsSidebar",previous:{title:"Query Basics",permalink:"/mvom/docs/Model/Querying/model_query_basics"},next:{title:"Combining Multiple Operators",permalink:"/mvom/docs/Model/Querying/model_query_multiple_operators"}},s={},d=[{value:"Equality Operator",id:"equality-operator",level:2},{value:"Example",id:"example",level:3},{value:"Implicit Equality Operator",id:"implicit-equality-operator",level:3},{value:"Example",id:"example-1",level:4},{value:"Greater than operator",id:"greater-than-operator",level:2},{value:"Example",id:"example-2",level:3},{value:"Greater than or equal to operator",id:"greater-than-or-equal-to-operator",level:2},{value:"Example",id:"example-3",level:3},{value:"Less than operator",id:"less-than-operator",level:2},{value:"Example",id:"example-4",level:3},{value:"Less than or equal to operator",id:"less-than-or-equal-to-operator",level:2},{value:"Example",id:"example-5",level:3},{value:"Not Equal Operator",id:"not-equal-operator",level:2},{value:"Example",id:"example-6",level:3},{value:"Contains operator",id:"contains-operator",level:2},{value:"Example",id:"example-7",level:3},{value:"Starts With Operator",id:"starts-with-operator",level:2},{value:"Example",id:"example-8",level:3},{value:"Ends With Operator",id:"ends-with-operator",level:2},{value:"Example",id:"example-9",level:3},{value:"In Operator",id:"in-operator",level:2},{value:"Example",id:"example-10",level:3},{value:"Implicit In Operator",id:"implicit-in-operator",level:3},{value:"Example",id:"example-11",level:4},{value:"Not In Operator",id:"not-in-operator",level:2},{value:"Example",id:"example-12",level:3}];function c(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"query-conditional-operators",children:"Query Conditional Operators"})}),"\n",(0,t.jsx)(r.p,{children:"MVOM supports a number of query operators to use for filtering the results of a query."}),"\n",(0,t.jsxs)(r.p,{children:["All examples on this page are working with a ",(0,t.jsx)(r.code,{children:"Model"})," constructed in the following manner:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"const schema = new Schema({\n  description: { type: 'string', path: 1, dictionary: 'DESCRIPTION' },\n  price: { type: 'number', path: 2, dbDecimals: 2, dictionary: 'PRICE' },\n});\n\nconst Item = connection.model(schema, 'ITEM');\n"})}),"\n",(0,t.jsx)(r.h2,{id:"equality-operator",children:"Equality Operator"}),"\n",(0,t.jsxs)(r.p,{children:["The equality operator is ",(0,t.jsx)(r.code,{children:"$eq"}),". This operator will find records where the property's value is equal to the provided conditional value."]}),"\n",(0,t.jsx)(r.h3,{id:"example",children:"Example"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"const items = await Item.find({ price: { $eq: 100 } });\n"})}),"\n",(0,t.jsx)(r.p,{children:"The query which will be executed on the MultiValue database is:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'select ITEM with PRICE = "100"\n'})}),"\n",(0,t.jsx)(r.h3,{id:"implicit-equality-operator",children:"Implicit Equality Operator"}),"\n",(0,t.jsxs)(r.p,{children:["When querying for equality, it is not necessary to use the ",(0,t.jsx)(r.code,{children:"$eq"})," operator. The following query condition filter object format will implicitly assume equality without the need for specifying the ",(0,t.jsx)(r.code,{children:"$eq"})," operator."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"{\n  propertyName: conditionalValue;\n}\n"})}),"\n",(0,t.jsx)(r.h4,{id:"example-1",children:"Example"}),"\n",(0,t.jsx)(r.p,{children:"This example illustrates using the implicit equality syntax to execute the same query as shown using the explicit equality operator."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"const items = await Item.find({ price: 100 });\n"})}),"\n",(0,t.jsx)(r.p,{children:"The query which will be executed on the MultiValue database is:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'select ITEM with PRICE = "100"\n'})}),"\n",(0,t.jsx)(r.h2,{id:"greater-than-operator",children:"Greater than operator"}),"\n",(0,t.jsxs)(r.p,{children:["The greater than operator is ",(0,t.jsx)(r.code,{children:"$gt"}),". This operator will find records where the property's value is greater than the provided conditional value."]}),"\n",(0,t.jsx)(r.h3,{id:"example-2",children:"Example"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"const items = await Item.find({ price: { $gt: 100 } });\n"})}),"\n",(0,t.jsx)(r.p,{children:"The query which will be executed on the MultiValue database is:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'select ITEM with PRICE > "100"\n'})}),"\n",(0,t.jsx)(r.h2,{id:"greater-than-or-equal-to-operator",children:"Greater than or equal to operator"}),"\n",(0,t.jsxs)(r.p,{children:["The greater than or equal to operator is ",(0,t.jsx)(r.code,{children:"$gte"}),". This operator will find records where the property's value is greater than or equal to the provided conditional value."]}),"\n",(0,t.jsx)(r.h3,{id:"example-3",children:"Example"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"const items = await Item.find({ price: { $gte: 100 } });\n"})}),"\n",(0,t.jsx)(r.p,{children:"The query which will be executed on the MultiValue database is:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'select ITEM with PRICE >= "100"\n'})}),"\n",(0,t.jsx)(r.h2,{id:"less-than-operator",children:"Less than operator"}),"\n",(0,t.jsxs)(r.p,{children:["The less than operator is ",(0,t.jsx)(r.code,{children:"$lt"}),". This operator will find records where the property's value is less than the provided conditional value."]}),"\n",(0,t.jsx)(r.h3,{id:"example-4",children:"Example"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"const items = await Item.find({ price: { $lt: 100 } });\n"})}),"\n",(0,t.jsx)(r.p,{children:"The query which will be executed on the MultiValue database is:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'select ITEM with PRICE < "100"\n'})}),"\n",(0,t.jsx)(r.h2,{id:"less-than-or-equal-to-operator",children:"Less than or equal to operator"}),"\n",(0,t.jsxs)(r.p,{children:["The less than or equal to operator is ",(0,t.jsx)(r.code,{children:"$lte"}),". This operator will find records where the property's value is less than or equal to the provided conditional value."]}),"\n",(0,t.jsx)(r.h3,{id:"example-5",children:"Example"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"const items = await Item.find({ price: { $lte: 100 } });\n"})}),"\n",(0,t.jsx)(r.p,{children:"The query which will be executed on the MultiValue database is:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'select ITEM with PRICE <= "100"\n'})}),"\n",(0,t.jsx)(r.h2,{id:"not-equal-operator",children:"Not Equal Operator"}),"\n",(0,t.jsxs)(r.p,{children:["The not equal operator is ",(0,t.jsx)(r.code,{children:"$ne"}),". This operator will find records where the property's value is not equal to the provided conditional value."]}),"\n",(0,t.jsx)(r.h3,{id:"example-6",children:"Example"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"const items = await Item.find({ price: { $ne: 100 } });\n"})}),"\n",(0,t.jsx)(r.p,{children:"The query which will be executed on the MultiValue database is:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'select ITEM with PRICE # "100"\n'})}),"\n",(0,t.jsx)(r.h2,{id:"contains-operator",children:"Contains operator"}),"\n",(0,t.jsxs)(r.p,{children:["The contains operator is ",(0,t.jsx)(r.code,{children:"$contains"}),". This operator will find records where the property's value contains the provided conditional value."]}),"\n",(0,t.jsx)(r.h3,{id:"example-7",children:"Example"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"const items = await Item.find({ description: { $contains: 'Bed' } });\n"})}),"\n",(0,t.jsx)(r.p,{children:"The query which will be executed on the MultiValue database is:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'select ITEM with DESCRIPTION like "...Bed..."\n'})}),"\n",(0,t.jsx)(r.admonition,{type:"warning",children:(0,t.jsxs)(r.p,{children:["Queries with the ",(0,t.jsx)(r.code,{children:"$contains"})," operator cannot include single or double quotes (",(0,t.jsx)(r.code,{children:"'"})," or ",(0,t.jsx)(r.code,{children:'"'}),") in the query constant value."]})}),"\n",(0,t.jsx)(r.h2,{id:"starts-with-operator",children:"Starts With Operator"}),"\n",(0,t.jsxs)(r.p,{children:["The starts with operator is ",(0,t.jsx)(r.code,{children:"$startsWith"}),". This operator will find records where the property's value starts with the provided conditional value."]}),"\n",(0,t.jsx)(r.h3,{id:"example-8",children:"Example"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"const items = await Item.find({ description: { $startsWith: 'Bed' } });\n"})}),"\n",(0,t.jsx)(r.p,{children:"The query which will be executed on the MultiValue database is:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'select ITEM with DESCRIPTION like "Bed..."\n'})}),"\n",(0,t.jsx)(r.admonition,{type:"warning",children:(0,t.jsxs)(r.p,{children:["Queries with the ",(0,t.jsx)(r.code,{children:"$startsWith"})," operator cannot include single or double quotes (",(0,t.jsx)(r.code,{children:"'"})," or ",(0,t.jsx)(r.code,{children:'"'}),") in the query constant value."]})}),"\n",(0,t.jsx)(r.h2,{id:"ends-with-operator",children:"Ends With Operator"}),"\n",(0,t.jsxs)(r.p,{children:["The ends with operator is ",(0,t.jsx)(r.code,{children:"$endsWith"}),". This operator will find records where the property's value ends with the provided conditional value."]}),"\n",(0,t.jsx)(r.h3,{id:"example-9",children:"Example"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"const items = await Item.find({ description: { $endsWith: 'Bed' } });\n"})}),"\n",(0,t.jsx)(r.p,{children:"The query which will be executed on the MultiValue database is:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'select ITEM with DESCRIPTION like "...Bed"\n'})}),"\n",(0,t.jsx)(r.admonition,{type:"warning",children:(0,t.jsxs)(r.p,{children:["Queries with the ",(0,t.jsx)(r.code,{children:"$endsWith"})," operator cannot include single or double quotes (",(0,t.jsx)(r.code,{children:"'"})," or ",(0,t.jsx)(r.code,{children:'"'}),") in the query constant value."]})}),"\n",(0,t.jsx)(r.h2,{id:"in-operator",children:"In Operator"}),"\n",(0,t.jsxs)(r.p,{children:["The in operator is ",(0,t.jsx)(r.code,{children:"$in"}),". Unlike most other operators, the ",(0,t.jsx)(r.code,{children:"$in"})," operator accepts an array of conditional values. This operator will find records where the property's value is equal to any of the values provided in the array."]}),"\n",(0,t.jsx)(r.h3,{id:"example-10",children:"Example"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"const items = await Item.find({ description: { $in: ['Bed', 'Chair', 'Couch'] } });\n"})}),"\n",(0,t.jsx)(r.p,{children:"The query which will be executed on the MultiValue database is:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'select ITEM with (DESCRIPTION = "Bed" or DESCRIPTION = "Chair" or DESCRIPTION = "Couch")\n'})}),"\n",(0,t.jsx)(r.h3,{id:"implicit-in-operator",children:"Implicit In Operator"}),"\n",(0,t.jsxs)(r.p,{children:["When querying for properties matching any of a list, it is not necessary to use the ",(0,t.jsx)(r.code,{children:"$in"}),' operator. The following query condition filter object format will implicitly assume "in" without the need for specifying the ',(0,t.jsx)(r.code,{children:"$in"})," operator. This works similarly to the ",(0,t.jsx)(r.a,{href:"#implicit-equality-operator",children:"implicit equality operator"})," except the conditional value will be an array."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"{\n  propertyName: [conditionalValue1, conditionalValue2];\n}\n"})}),"\n",(0,t.jsx)(r.h4,{id:"example-11",children:"Example"}),"\n",(0,t.jsx)(r.p,{children:"This example illustrates using the implicit in operator syntax to execute the same query as shown using the explicit in operator."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"const items = await Item.find({ description: ['Bed', 'Chair', 'Couch'] });\n"})}),"\n",(0,t.jsx)(r.p,{children:"The query which will be executed on the MultiValue database is:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'select ITEM with (DESCRIPTION = "Bed" or DESCRIPTION = "Chair" or DESCRIPTION = "Couch")\n'})}),"\n",(0,t.jsx)(r.h2,{id:"not-in-operator",children:"Not In Operator"}),"\n",(0,t.jsxs)(r.p,{children:["The not in operator is ",(0,t.jsx)(r.code,{children:"$nin"}),". Unlike most other operators, the ",(0,t.jsx)(r.code,{children:"$nin"})," operator accepts an array of conditional values. This operator will find records where the property's value is not equal to any of the values provided in the array."]}),"\n",(0,t.jsx)(r.h3,{id:"example-12",children:"Example"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"const items = await Item.find({ description: { $nin: ['Bed', 'Chair', 'Couch'] } });\n"})}),"\n",(0,t.jsx)(r.p,{children:"The query which will be executed on the MultiValue database is:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:'select ITEM with (DESCRIPTION # "Bed" and DESCRIPTION # "Chair" and DESCRIPTION # "Couch")\n'})})]})}function h(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,r,i)=>{i.d(r,{R:()=>a,x:()=>o});var t=i(6540);const n={},l=t.createContext(n);function a(e){const r=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:a(e.components),t.createElement(l.Provider,{value:r},e.children)}}}]);