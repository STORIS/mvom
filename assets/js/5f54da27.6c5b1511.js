"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[141],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),s=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=s(n),m=r,f=u["".concat(p,".").concat(m)]||u[m]||l[m]||i;return n?o.createElement(f,a(a({ref:t},d),{},{components:n})):o.createElement(f,a({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=u;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var s=2;s<i;s++)a[s]=n[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5164:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return l}});var o=n(7462),r=n(3366),i=(n(7294),n(3905)),a=["components"],c={id:"model_projection",title:"Projection"},p="Projection",s={unversionedId:"Model/Advanced Topics/model_projection",id:"Model/Advanced Topics/model_projection",title:"Projection",description:"Consumers do not always want to return the entire contents of a record. In particular, for large records, returning the entirety of the record can increase the size of data transfer payloads and reduce overall performance if all of the data from a record is not needed. To support this behavior, many read operations allow for specification of a projection property. This projection property allows the consumer to limit the properties returned from the database resulting in reduced data traffic.",source:"@site/docs/04 - Model/07 - Advanced Topics/02 - Projection.md",sourceDirName:"04 - Model/07 - Advanced Topics",slug:"/Model/Advanced Topics/model_projection",permalink:"/mvom/docs/Model/Advanced Topics/model_projection",draft:!1,editUrl:"https://github.com/STORIS/mvom/tree/main/website/docs/04 - Model/07 - Advanced Topics/02 - Projection.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"model_projection",title:"Projection"},sidebar:"docsSidebar",previous:{title:"The __v Property",permalink:"/mvom/docs/Model/Advanced Topics/model_version"},next:{title:"Schemaless Models",permalink:"/mvom/docs/Model/Advanced Topics/model_schemaless"}},d={},l=[{value:"Using Projection",id:"using-projection",level:2},{value:"Example",id:"example",level:3}],u={toc:l};function m(e){var t=e.components,n=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"projection"},"Projection"),(0,i.kt)("p",null,"Consumers do not always want to return the entire contents of a record. In particular, for large records, returning the entirety of the record can increase the size of data transfer payloads and reduce overall performance if all of the data from a record is not needed. To support this behavior, many read operations allow for specification of a ",(0,i.kt)("inlineCode",{parentName:"p"},"projection")," property. This ",(0,i.kt)("inlineCode",{parentName:"p"},"projection")," property allows the consumer to limit the properties returned from the database resulting in reduced data traffic."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"It is highly advised to never save a ",(0,i.kt)("inlineCode",{parentName:"p"},"Model")," that is instantiated from a read operation using ",(0,i.kt)("inlineCode",{parentName:"p"},"projection"),". Unless you really know what you are doing, this could result in data loss as the ",(0,i.kt)("inlineCode",{parentName:"p"},"Model")," instance will not contain the data that was excluded from the projection.")),(0,i.kt)("h2",{id:"using-projection"},"Using Projection"),(0,i.kt)("p",null,"For operations which support projection, the behavior can be implemented by specifying the ",(0,i.kt)("inlineCode",{parentName:"p"},"projection")," property. The projection property is an array of strings which correspond to the defined schema property names."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Any properties which are defined in the schema but are not indicated as a projected property will be assigned a value of ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),". They will continue to exist on the ",(0,i.kt)("inlineCode",{parentName:"p"},"Model"),".")),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const schema = new Schema({\n  description: { type: 'string', path: 1, dictionary: 'DESCRIPTION' },\n  price: { type: 'number', path: 2, dbDecimals: 2, dictionary: 'PRICE' },\n});\n\nconst Item = connection.model(schema, 'ITEM');\n\nconst items = await Item.find({ price: { $gt: 100 } }, { projection: ['description'] });\nconsole.log(items[0].description); // outputs \"Racecar Bed\"\nconsole.log(items[0].price); // outputs null because price was not included in the projection\n")))}m.isMDXComponent=!0}}]);