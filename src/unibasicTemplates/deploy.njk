$basictype 'U'
subroutine mvom_deploy(options, output)
{% include "./partials/errorConstants.njk" %}

* deploy source code
if udoGetProperty(options, 'sourceDir', sourceDir, type) then
  call error_handler(ERROR_MALFORMED_INPUT, output)
  go returnFromSub
end

if udoGetProperty(options, 'source', source, type) then
  call error_handler(ERROR_MALFORMED_INPUT, output)
  go returnFromSub
end

if udoGetProperty(options, 'programName', programName, type) then
  call error_handler(ERROR_MALFORMED_INPUT, output)
  go returnFromSub
end

open sourceDir to f.sourceDir on error
  call error_handler(ERROR_FILE_OPEN, output)
  go returnFromSub
end else
  call error_handler(ERROR_FILE_OPEN, output)
  go returnFromSub
end

write source on f.sourceDir, programName on error
  close f.sourceDir on error null
  call error_handler(ERROR_RECORD_WRITE, output)
  go returnFromSub
end

close f.sourceDir on error null

* compiling with override and case-insensitive flags
execute 'basic ':sourceDir:' ':programName:' -d -o -i' returning errmsg
if @system.return.code then
  call error_handler(ERROR_DEPLOYMENT, output)
  go returnFromSub
end

* cataloging with default catalog (global) with force override
execute 'catalog ':sourceDir:' ':programName:' force' returning errmsg
if @system.return.code then
  call error_handler(ERROR_DEPLOYMENT, output)
  go returnFromSub
end

if udoSetProperty(output, 'deployed', programName) then
  call error_handler(ERROR_UDO, output)
  go returnFromSub
end

returnFromSub:
return; * returning to caller
{% include "./partials/errorHandler.njk" %}
