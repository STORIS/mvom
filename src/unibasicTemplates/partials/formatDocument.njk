subroutine format_document(record, recordId, projection, document, errorCode)
* format a record into an output document structure
{% include "./udoConstants.njk" %}

{% include "./errorConstants.njk" %}

errorCode = ''

* get projection positions
projectionPositions = ''
loop
  statusCode = UDOArrayGetNextItem(projection, projectionPosition, type)
  if statusCode eq UDO_ERROR then
    * reach the end of the array
    exit
  end
  if statusCode ne UDO_SUCCESS then
    * any other possible error
    errorCode = ERROR_UDO
    go returnFromSub
  end
  projectionPositions<-1> = projectionPosition
repeat

* create output document object
if udoCreate(UDO_OBJECT, document) then
  errorCode = ERROR_UDO
  go returnFromSub
end

* set document _id property
if udoSetProperty(document, '_id', recordId) then
  errorCode = ERROR_UDO
  go returnFromSub
end

if record eq '' then
  * empty record
  if udoCreate(UDO_NULL, null) then
    errorCode = ERROR_UDO
    go returnFromSub
  end

  if udoSetProperty(document, '__v', null) then
    errorCode = ERROR_UDO
    go returnFromSub
  end
end else
  * create a hash of the record for versioning purposes
  if digest('MD5', record, 1, recordHash) then
    errorCode = ERROR_DIGEST_HASH
    go returnFromSub
  end

  * set document version property
  if udoSetProperty(document, '__v', oconv(recordHash, 'MX0C')) then
    errorCode = ERROR_UDO
    go returnFromSub
  end
end

lastProjectionPosition = dcount(projectionPositions, @am)

if (lastProjectionPosition > 0) then
  recordContents = ''
  for position = 1 to lastProjectionPosition
    recordContents<position> = record<position>
  next position
end else
  recordContents = record
end

* set document record property
if udoSetProperty(document, 'record', recordContents) then
  errorCode = ERROR_UDO
  go returnFromSub
end

returnFromSub:
return; * returning to caller
