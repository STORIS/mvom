subroutine mvom_checkForRecorLockById(options, output)
* check if there is a record locked on file *
{% include "../../constants/udo.njk" %}
{% include "../../constants/error.njk" %}

* get the filename from the options
if udoGetProperty(options, 'filename', filename, type) then
  call error_handler(ERROR_MALFORMED_INPUT, output)
  go returnFromSub
end

* get the recordId from the options
if udoGetProperty(options, 'id', recordId, type) then
  call error_handler(ERROR_MALFORMED_INPUT, output)
  go returnFromSub
end

* open the file
open filename to f.file on error
  call error_handler(ERROR_FILE_OPEN, output)
  go returnFromSub
end else
  call error_handler(ERROR_FILE_OPEN, output)
  go returnFromSub
end

* read and lock record from the file
readu record from f.file, recordId on error
  call error_handler(ERROR_RECORD_READ, output)
  go closeAndReturnFromSub
end locked
  udoSetProperty(output, 'result', @TRUE)
  go closeAndReturnFromSub
end else
  udoSetProperty(output, 'result', @FALSE)
  go closeReleaseAndReturnFromSub
end

closeReleaseAndReturnFromSub:
release f.file, recordId on error null
* fall through to close and return

closeAndReturnFromSub:
close f.file on error null
* fall through to return

returnFromSub:
return; * returning to caller
