subroutine mvom_save(options, output)
* save a document given a filename, record id, and record contents
{% include "../../constants/udo.njk" %}
{% include "../../constants/error.njk" %}
{% include "../../constants/status.njk" %}

* get the filename from the options
if udoGetProperty(options, 'filename', filename, type) then
  call error_handler(ERROR_MALFORMED_INPUT, output)
  go returnFromSub
end

* get the recordId from the options
if udoGetProperty(options, 'id', recordId, type) then
  call error_handler(ERROR_MALFORMED_INPUT, output)
  go returnFromSub
end

* get the previous record version (if any) from the options
if udoGetProperty(options, '__v', recordHash, recordHashType) then
  call error_handler(ERROR_MALFORMED_INPUT, output)
  go returnFromSub
end
if recordHashType eq UDO_NULL then
  recordHash = ''
end

* get the record from the options
if udoGetProperty(options, 'record', record, type) then
  call error_handler(ERROR_MALFORMED_INPUT, output)
  go returnFromSub
end

* get the foreign key definitions contents from the options
if udoGetProperty(options, 'foreignKeyDefinitions', fkDefinitions, type) then
  call error_handler(ERROR_MALFORMED_INPUT, output)
  go returnFromSub
end

* open the file
open filename to f.file on error
  call error_handler(ERROR_FILE_OPEN, output)
  go returnFromSub
end else
  call error_handler(ERROR_FILE_OPEN, output)
  go returnFromSub
end

* read and lock record from the file
readu originalRecord from f.file, recordId on error
  call error_handler(ERROR_RECORD_READ, output)
  go closeAndReturnFromSub
end locked
  call error_handler(ERROR_RECORD_LOCKED, output)
  go closeAndReturnFromSub
end then
  if originalRecord eq '' then
    * empty record
    originalRecordHash = ''
  end else
    if digest('MD5', originalRecord, 1, originalRecordHash) then
      errorCode = ERROR_DIGEST_HASH
      go closeReleaseAndReturnFromSub
    end

    originalRecordHash = oconv(originalRecordHash, 'MX0C')
  end

  if originalRecordHash ne recordHash then
    call error_handler(ERROR_RECORD_VERSION, output)
    go closeReleaseAndReturnFromSub
  end
end else
  if recordHash ne '' then
    * this record existed previously, reject the save
    call error_handler(ERROR_RECORD_VERSION, output)
    go closeReleaseAndReturnFromSub
  end
end

* validate any foreign keys before updating
call validate_foreign_keys(fkDefinitions, fkValidationErrors, errorCode)
if errorCode then
  call error_handler(errorCode, output)
  go returnFromSub
end

if udoSetProperty(output, 'foreignKeyValidationErrors', fkValidationErrors) then
  call error_handler(ERROR_UDO, output)
  go closeReleaseAndReturnFromSub
end

if udoArrayGetSize(fkValidationErrors, fkValidationErrorCount) then
  call error_handler(ERROR_UDO, output)
  go closeReleaseAndReturnFromSub
end

if fkValidationErrorCount > 0 then
  call error_handler(ERROR_FOREIGN_KEY, output)
  go closeReleaseAndReturnFromSub
end

* create null projection
if udoCreate(UDO_NULL, projection) then
   call error_handler(ERROR_UDO, output)
   go closeAndReturnFromSub
end

* write out record
write record on f.file, recordId on error
  statusCode = status()
  begin case
    case statusCode eq STATUS_WRITE_SYSTEM_ERROR
      call error_handler(ERROR_RECORD_WRITE, output)
    case statusCode eq STATUS_WRITE_TRIGGER_CONSTRAINT
      call error_handler(ERROR_RECORD_WRITE_TRIGGER_CONSTRAINT, output)
    case statusCode eq STATUS_WRITE_TRIGGER_ERROR
      call error_handler(ERROR_RECORD_WRITE_TRIGGER_ERROR, output)
    case statusCode eq STATUS_WRITE_DUPLICATE_INDEX
      call error_handler(ERROR_RECORD_WRITE_DUPLICATE_INDEX, output)
    case 1
      * Unknown error status code
      call error_handler(ERROR_RECORD_WRITE_UNKNOWN, output)
  end case

  go closeAndReturnFromSub
end

close f.file on error null

* format the modified record into an object structure
call format_document(record, recordId, projection, document, errorCode)
if errorCode then
  call error_handler(errorCode, output)
  go returnFromSub
end

* set the result property
if udoSetProperty(output, 'result', document) then
  call error_handler(ERROR_UDO, output)
  go returnFromSub
end

go returnFromSub;* skip close and release behaviors

closeReleaseAndReturnFromSub:
release f.file, recordId on error null
* fall through to close and return

closeAndReturnFromSub:
close f.file on error null
* fall through to return

returnFromSub:
return; * returning to caller
