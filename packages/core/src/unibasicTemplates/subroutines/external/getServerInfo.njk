subroutine mvom_getServerInfo(options, output)
{% include "../../constants/udo.njk" %}
{% include "../../constants/error.njk" %}

if udoSetProperty(output, 'date', date(), UDO_NUMBER) then
  call error_handler(ERROR_UDO, output)
  go returnFromSub
end

if udoSetProperty(output, 'time', system(12), UDO_NUMBER) then
  call error_handler(ERROR_UDO, output)
  go returnFromSub
end

if udoCreate(UDO_OBJECT, delimiters) then
  call error_handler(ERROR_UDO, output)
  go returnFromSub
end

if udoSetProperty(delimiters, 'rm', @rm) then
  call error_handler(ERROR_UDO, output)
  go returnFromSub
end

if udoSetProperty(delimiters, 'am', @am) then
  call error_handler(ERROR_UDO, output)
  go returnFromSub
end

if udoSetProperty(delimiters, 'vm', @vm) then
  call error_handler(ERROR_UDO, output)
  go returnFromSub
end

if udoSetProperty(delimiters, 'svm', @svm) then
  call error_handler(ERROR_UDO, output)
  go returnFromSub
end

if udoSetProperty(output, 'delimiters', delimiters) then
  call error_handler(ERROR_UDO, output)
  go returnFromSub
end

if udoCreate(UDO_OBJECT, limits) then
  call error_handler(ERROR_UDO, output)
  go returnFromSub
end

hush off
udtexecute 'limit' returning errmsg capturing limitDetails
hush on

for limitDetailPosition = 1 to dcount(limitDetails, @am)
  limitDetail = limitDetails<limitDetailPosition>
  limitKey = field(limitDetail, ':', 1)
  limitValue = oconv(field(limitDetail, '=', 2), 'MCN')

  begin case
    case limitKey eq 'U_MAXSORT'
      if udoSetProperty(limits, 'maxSort', limitValue, UDO_NUMBER) then
        call error_handler(ERROR_UDO, output)
        go returnFromSub
      end
    case limitKey eq 'U_MAXWITH'
      if udoSetProperty(limits, 'maxWith', limitValue, UDO_NUMBER) then
        call error_handler(ERROR_UDO, output)
        go returnFromSub
      end
    case limitKey eq 'U_SENTLEN'
      if udoSetProperty(limits, 'maxSentenceLength', limitValue, UDO_NUMBER) then
        call error_handler(ERROR_UDO, output)
        go returnFromSub
      end
  end case
next limitDetailPosition

if udoSetProperty(output, 'limits', limits) then
  call error_handler(ERROR_UDO, output)
  go returnFromSub
end

returnFromSub:
return; * returning to caller
